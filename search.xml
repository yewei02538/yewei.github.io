<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[手撸一个今日头条视频下载器]]></title>
      <url>http://weyye.me/detail/today-news-video/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今日头条是我最喜欢的app之一，当然喜欢并不是因为内容精彩，而是逗比的评论，而且看视频的没有广告，我这个人喜欢收藏，尤其是小视频（手动滑稽），可是却没有下载的按钮，之后在<a href="http://www.weyye.me/detail/my-project-today-news/" target="_blank" rel="external">仿今日头条项目</a>里也需要用到视频，进入网页右键另存为也比较麻烦，作为程序猿，这可不是我们的办事风格。于是动手撸了一个视频下载器,喜欢的记得给个Star，当作是给我的鼓励和动力吧。<br><a id="more"></a></p>
<h2 id="成果图"><a href="#成果图" class="headerlink" title="成果图"></a>成果图</h2><p><img src="/img/video1.gif" alt=""></p>
<p><img src="/img/video2.gif" alt=""></p>
<h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p><a href="https://github.com/yewei02538/TodayNewsVideoDownloader" target="_blank" rel="external">https://github.com/yewei02538/TodayNewsVideoDownloader</a></p>
<h2 id="分析视频地址"><a href="#分析视频地址" class="headerlink" title="分析视频地址"></a>分析视频地址</h2><p>详细的视频地址分析请看<a href="http://blog.csdn.net/jiangwei0910410003/article/details/54092364" target="_blank" rel="external">Python脚本下载今日头条视频(附加Android版本辅助下载器)</a></p>
<p>这里我摘出来视频的获取流程</p>
<blockquote>
<p>1、将/video/urls/v/1/toutiao/mp4/{videoid}?r={Math.random()}，进行crc32加密。<br>2、将上面得到的加密值拼接到上面的链接中即可，最终的链接形式是：<br><a href="http://i.snssdk.com/video/urls/v/1/toutiao/mp4/{videoid}?r={Math.random()}&amp;s={crc32值}" target="_blank" rel="external">http://i.snssdk.com/video/urls/v/1/toutiao/mp4/{videoid}?r={Math.random()}&amp;s={crc32值}</a><br>3、访问这个链接得到一个json数据，需要解析video_list数组中的main_url值，然后用base64解码得到最终的原始视频链接。<br>看到上面的步骤并不复杂，但是在操作过程中还是有些地方需要注意的，主要是上面的那个随机数和crc32加密逻辑,videoid可以从视频网页的html源代码里面获取</p>
</blockquote>
<p><img src="/img/QQ截图20170215161710.png" alt=""></p>
<p>用正则表达式取出videoid即可</p>
<p>看流程分析，我们需要视频所在的网页地址，在get请求访问成功的回调里面进行正则表达式匹配，然后将/video/urls/v/1/toutiao/mp4/{videoid}?r={Math.random()}，进行crc32加密，然后拼在一起，再get请求，再在请求成功的回调里解析json获取base64编码的地址，然后进行解码，最后获得视频源地址。这一些列操作都是需要请求成功才可以执行的，可以想到嵌套里面再嵌套，那种代码逻辑着实让人看着蛋疼，所以这个时候RxJava的优势就出来了，完美的解决了这个问题，如果还不是很懂RxJava的朋友可以去看下这篇文章<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></p>
<h2 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h2><p>首先得先获取到播放视频的网页地址，这里我使用的是分享来接收，今日头条有分享功能，分享的内容里面肯定会有地址，所以我们来配置下接收分享</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;activity</div><div class="line">            android:name=".ui.MainActivity"</div><div class="line">            android:label="@string/app_name"</div><div class="line">            android:launchMode="singleTask"</div><div class="line">            android:theme="@style/AppTheme.NoActionBar"&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name="android.intent.action.MAIN"/&gt;</div><div class="line"></div><div class="line">                &lt;category android:name="android.intent.category.LAUNCHER"/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name="android.intent.action.SEND"/&gt;</div><div class="line"></div><div class="line">                &lt;category android:name="android.intent.category.DEFAULT"/&gt;</div><div class="line"></div><div class="line">                &lt;data android:mimeType="text/plain"/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>ok,这样就具备的接收的功能，然后在<code>MainActivity</code>里面写上接受的逻辑</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onNewIntent(intent);</div><div class="line">    Log.i(<span class="string">"MainActivity"</span>, <span class="string">"onNewIntent"</span>);</div><div class="line">    String title = intent.getStringExtra(Intent.EXTRA_TEXT);</div><div class="line">    parseUrl(title);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseUrl</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">    <span class="comment">//取出网页地址</span></div><div class="line">    Pattern pattern = Pattern.compile(<span class="string">"【(.+)】\\n(http.+)"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Matcher matcher = pattern.matcher(title);</div><div class="line">    <span class="keyword">if</span> (matcher.find()) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ProgressDialog dialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">        dialog.setMessage(<span class="string">"正在获取视频地址，请稍后~"</span>);</div><div class="line">        dialog.setCanceledOnTouchOutside(<span class="keyword">false</span>);</div><div class="line">        <span class="comment">//解析视频真实地址</span></div><div class="line">        VideoPathDecoder decoder = <span class="keyword">new</span> VideoPathDecoder() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Video s)</span> </span>&#123;</div><div class="line">                dialog.dismiss();</div><div class="line">                s.title = matcher.group(<span class="number">1</span>);</div><div class="line">                mDatas.add(s);</div><div class="line">                mAdapter.notifyItemInserted(mDatas.size());</div><div class="line">                startDownload(s);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDecodeError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                dialog.dismiss();</div><div class="line">                Snackbar.make(mRecyclerView, <span class="string">"获取视频失败！"</span>, Snackbar.LENGTH_LONG).show();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        dialog.show();</div><div class="line">        decoder.decodePath(matcher.group(<span class="number">2</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Snackbar.make(mRecyclerView, <span class="string">"不是分享的链接"</span>, Snackbar.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先通过正则表达式取出分享链接，然后进行视频解析</p>
<p>视频解析的核心代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">AppClient.getApiService().getVideoHtml(srcUrl)</div><div class="line">               .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;ResultResponse&lt;VideoModel&gt;&gt;&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="keyword">public</span> Observable&lt;ResultResponse&lt;VideoModel&gt;&gt; call(String response) &#123;</div><div class="line">                       Pattern pattern = Pattern.compile(<span class="string">"videoid:\'(.+)\'"</span>);</div><div class="line">                       Matcher matcher = pattern.matcher(response);</div><div class="line">                       <span class="keyword">if</span> (matcher.find()) &#123;</div><div class="line">                           String videoId = matcher.group(<span class="number">1</span>);</div><div class="line">                           Log.i(TAG,videoId);</div><div class="line">                           <span class="comment">//1.将/video/urls/v/1/toutiao/mp4/&#123;videoid&#125;?r=&#123;Math.random()&#125;，进行crc32加密。</span></div><div class="line">                           String r = getRandom();</div><div class="line">                           CRC32 crc32 = <span class="keyword">new</span> CRC32();</div><div class="line">                           String s = String.format(ApiService.URL_VIDEO, videoId, r);</div><div class="line">                           <span class="comment">//进行crc32加密。</span></div><div class="line">                           crc32.update(s.getBytes());</div><div class="line">                           String crcString = crc32.getValue() + <span class="string">""</span>;</div><div class="line">                           <span class="comment">//2.访问http://i.snssdk.com/video/urls/v/1/toutiao/mp4/&#123;videoid&#125;?r=&#123;Math.random()&#125;&amp;s=&#123;crc32值&#125;</span></div><div class="line">                           String url = ApiService.HOST_VIDEO + s + <span class="string">"&amp;s="</span> + crcString;</div><div class="line">                           Log.i(TAG,url);</div><div class="line">                           <span class="keyword">return</span> AppClient.getApiService().getVideoData(url);</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;)</div><div class="line">               .map(<span class="keyword">new</span> Func1&lt;ResultResponse&lt;VideoModel&gt;, Video&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> Video <span class="title">call</span><span class="params">(ResultResponse&lt;VideoModel&gt; videoModelResultResponse)</span> </span>&#123;</div><div class="line">                       VideoModel.VideoListBean data = videoModelResultResponse.data.video_list;</div><div class="line"></div><div class="line">                       <span class="keyword">if</span> (data.video_3 != <span class="keyword">null</span>) &#123;</div><div class="line">                           <span class="keyword">return</span> updateVideo(data.video_3);</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">if</span> (data.video_2 != <span class="keyword">null</span>) &#123;</div><div class="line">                           <span class="keyword">return</span> updateVideo(data.video_2);</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">if</span> (data.video_1 != <span class="keyword">null</span>) &#123;</div><div class="line">                           <span class="keyword">return</span> updateVideo(data.video_1);</div><div class="line">                       &#125;</div><div class="line">                       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="function"><span class="keyword">private</span> String <span class="title">getRealPath</span><span class="params">(String base64)</span> </span>&#123;</div><div class="line">                       <span class="keyword">return</span> <span class="keyword">new</span> String(Base64.decode(base64.getBytes(), Base64.DEFAULT));</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="function"><span class="keyword">private</span> Video <span class="title">updateVideo</span><span class="params">(Video video)</span> </span>&#123;</div><div class="line">                       <span class="comment">//base64解码</span></div><div class="line">                       video.main_url = getRealPath(video.main_url);</div><div class="line">                       <span class="keyword">return</span> video;</div><div class="line">                   &#125;</div><div class="line">               &#125;)</div><div class="line">               .subscribeOn(Schedulers.io())</div><div class="line">               .observeOn(AndroidSchedulers.mainThread())</div><div class="line">               .subscribe(<span class="keyword">new</span> Subscriber&lt;Video&gt;() &#123;</div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                       e.printStackTrace();</div><div class="line">                       onDecodeError(e);</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="meta">@Override</span></div><div class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Video s)</span> </span>&#123;</div><div class="line">                       onSuccess(s);</div><div class="line">                   &#125;</div><div class="line">               &#125;);</div></pre></td></tr></table></figure>
<p>ok，一套流程下来，我们就获取到视频的真实地址</p>
<p>视频获取出来，就可以下载了，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">(<span class="keyword">final</span> Video video)</span> </span>&#123;</div><div class="line"></div><div class="line">    FileDownload download = <span class="keyword">new</span> FileDownload(Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + <span class="string">"todayNewsVideo"</span></div><div class="line">            , UUID.randomUUID().toString() + <span class="string">"."</span> + video.vtype);</div><div class="line">    download.download(video.main_url, <span class="keyword">new</span> FileDownload.Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">            mAdapter.setPercent(video.main_url, -<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">            video.file = file;</div><div class="line">            mAdapter.setPercent(video.main_url, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inProgress</span><span class="params">(<span class="keyword">float</span> progress, <span class="keyword">long</span> total)</span> </span>&#123;</div><div class="line">            mAdapter.setPercent(video.main_url, (<span class="keyword">int</span>) (progress * <span class="number">100</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我没有使用<code>retrofit</code>，因为下载大文件的时候容易oom（希望有大神能解决我这个问题）为了方便，我直接使用原生的okhttp来下载</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String url, <span class="keyword">final</span> Callback callback)</span> </span>&#123;</div><div class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).build();</div><div class="line">        client.newCall(request).enqueue(<span class="keyword">new</span> okhttp3.Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call call, IOException e)</span> </span>&#123;</div><div class="line">                callback.onError(e);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call call, Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">final</span> File file = saveFile(response, callback);</div><div class="line">                    AppClient.getDelivery().post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            callback.onSuccess(file);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    callback.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ok,整个下载的逻辑就写完了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/jiangwei0910410003/article/details/54092364" target="_blank" rel="external">Python脚本下载今日头条视频(附加Android版本辅助下载器)</a></p>
<p><a href="http://stackoverflow.com/questions/21864863/android-canvas-clear-with-transparency" target="_blank" rel="external">Android Canvas Clear with transparency</a></p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>这个属于个人开发作品，仅做学习交流使用，<strong>切勿使用于商业用途，如用本程序做非法用途后果自负，与作者无关!!</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android仿今日头条的开源项目]]></title>
      <url>http://weyye.me/detail/my-project-today-news/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>看到众多大神纷纷有了自己的开源项目，于是自己琢磨着也想做一个开源项目来学习下，因为每次无聊必刷的app就是今日头条，评论简直比内容都精彩，所以我打算仿今日头条来练练手，期间也曾放弃过，也遇到很多坑，拿出来跟大家分享一下。该项目使用的是MVP+<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a>+<a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a>。喜欢的记得给个Star，当作是给我的鼓励和动力吧。<br><a id="more"></a></p>
<h2 id="源码链接"><a href="#源码链接" class="headerlink" title="源码链接"></a>源码链接</h2><p><a href="https://github.com/yewei02538/TodayNews" target="_blank" rel="external">https://github.com/yewei02538/TodayNews</a></p>
<h2 id="成果图"><a href="#成果图" class="headerlink" title="成果图"></a>成果图</h2><p><img src="/img/todaynews01.png" alt=""></p>
<p><img src="/img/todaynews02.png" alt=""></p>
<p><img src="/img/todaynews03.png" alt=""></p>
<p><img src="/img/todaynews04.png" alt=""></p>
<p><img src="/img/todaynews05.png" alt=""></p>
<p><img src="/img/todaynews06.png" alt=""></p>
<p><img src="/img/todaynews07.png" alt=""></p>
<p><img src="/img/todaynews08.jpg" alt=""></p>
<h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><ul>
<li><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="external">BaseRecyclerViewAdapterHelper</a></li>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">ImageLoader</a></li>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a></li>
<li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">RxJava</a></li>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a></li>
<li><a href="https://github.com/dersoncheng/MultipleTheme" target="_blank" rel="external">MultipleTheme</a></li>
<li><a href="https://github.com/hongyangAndroid/ColorTrackView" target="_blank" rel="external">ColorTrackView</a></li>
<li><a href="https://github.com/google/gson" target="_blank" rel="external">Gson</a></li>
<li><a href="https://github.com/lipangit/JieCaoVideoPlayer" target="_blank" rel="external">JieCaoVideoPlayer</a></li>
</ul>
<h2 id="技术要点"><a href="#技术要点" class="headerlink" title="技术要点"></a>技术要点</h2><ul>
<li>主要是一些第三方库的使用</li>
<li>首页顶部导航使用的<a href="https://github.com/hongyangAndroid" target="_blank" rel="external">hongyang</a>大神的<a href="https://github.com/hongyangAndroid/ColorTrackView" target="_blank" rel="external">ColorTrackView</a>然后做了一下封装来实现滑动渐变效果</li>
<li>多种Item布局展示-&gt;<a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="external">BaseRecyclerViewAdapterHelper</a></li>
<li>日夜间模式切换-&gt;<a href="https://github.com/dersoncheng/MultipleTheme" target="_blank" rel="external">MultipleTheme</a></li>
<li>个人中心 自定义ScrollView实现下拉图片放大</li>
<li>新闻详情我采用的是RecyclerView添加头的方式添加WebView（当然是Adapter里面添加）,加载页面成功之后获取评论信息，点击评论图标滑动至评论第一条，这里我是调用<code>recyclerView.smoothScrollToPosition(1);</code></li>
<li>视频播放我使用的是<a href="https://github.com/lipangit/JieCaoVideoPlayer" target="_blank" rel="external">JieCaoVideoPlayer</a>,一群大牛封装的代码，底层实际使用<a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="external">ijkplayer</a>,视频源均使用非正常手段获取，视频源地址分析请看我的另一篇博客<a href="http://www.weyye.me/detail/today-news-video/" target="_blank" rel="external">手撸一个今日头条视频下载器</a></li>
</ul>
<h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>在使用<a href="https://github.com/dersoncheng/MultipleTheme" target="_blank" rel="external">MultipleTheme</a>的时候唯一的缺陷就是需要在布局里面大量使用到自定义控件，这对于我们的项目而言，布局看着很冗余，也有点恶心。。我有时候就在想，那我可不可以写原生控件，然后在特定的时机来个偷梁换柱换成我们的自定义控件呢？(比如我们布局写RelativeLayout—转换成MyRelativeLayout),似乎好像是可以的。</p>
<h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><p>当时想到一个最简单最快实现的方法，也就是替换，我在布局里面写原生控件，然后在用工具全局替换成我们的自定义控件，但是假如我们换了包名，那就需要重新替换，这无疑是不易扩展的，所以这个方法放弃掉</p>
<h4 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h4><p>不知道大家有木有发现就是，我们在布局里面写上<code>Button</code>、<code>ImageView</code>、<code>TextView</code>等这些控件的时候，在5.0以上运行的时候实际变成了<code>AppCompatButton</code>、<code>AppCompatImageView</code>、<code>AppCompatTextView</code>(debug或者打印对象就可以看到实际的类型),在当我们运行的时候就这样悄无声息的给替换了，那系统又是怎么做到的？那只要找到它的实现方法，我们的问题不就迎刃而解了吗？</p>
<p><img src="/img/emoticon_chai_laugh.jpg" alt=""></p>
<p>于是我找到系统替换的代码（以下代码全部基于Api23）</p>
<p><strong>AppCompatViewInflater.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> View <span class="title">createView</span><span class="params">(View parent, <span class="keyword">final</span> String name, @NonNull Context context,</span></span></div><div class="line">        @NonNull AttributeSet attrs, <span class="keyword">boolean</span> inheritContext,</div><div class="line">        <span class="keyword">boolean</span> readAndroidTheme, <span class="keyword">boolean</span> readAppTheme, <span class="keyword">boolean</span> wrapContext) &#123;</div><div class="line">    <span class="keyword">final</span> Context originalContext = context;</div><div class="line"></div><div class="line">    <span class="comment">// We can emulate Lollipop's android:theme attribute propagating down the view hierarchy</span></div><div class="line">    <span class="comment">// by using the parent's context</span></div><div class="line">    <span class="keyword">if</span> (inheritContext &amp;&amp; parent != <span class="keyword">null</span>) &#123;</div><div class="line">        context = parent.getContext();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (readAndroidTheme || readAppTheme) &#123;</div><div class="line">        <span class="comment">// We then apply the theme on the context, if specified</span></div><div class="line">        context = themifyContext(context, attrs, readAndroidTheme, readAppTheme);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (wrapContext) &#123;</div><div class="line">        context = TintContextWrapper.wrap(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    View view = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">// We need to 'inject' our tint aware Views in place of the standard framework versions</span></div><div class="line">    <span class="keyword">switch</span> (name) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"TextView"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatTextView(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"ImageView"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatImageView(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"Button"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatButton(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"EditText"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatEditText(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"Spinner"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatSpinner(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"ImageButton"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatImageButton(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"CheckBox"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatCheckBox(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"RadioButton"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatRadioButton(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"CheckedTextView"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatCheckedTextView(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"AutoCompleteTextView"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatAutoCompleteTextView(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"MultiAutoCompleteTextView"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatMultiAutoCompleteTextView(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"RatingBar"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatRatingBar(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"SeekBar"</span>:</div><div class="line">            view = <span class="keyword">new</span> AppCompatSeekBar(context, attrs);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span> &amp;&amp; originalContext != context) &#123;</div><div class="line">        <span class="comment">// If the original context does not equal our themed context, then we need to manually</span></div><div class="line">        <span class="comment">// inflate it using the name so that android:theme takes effect.</span></div><div class="line">        view = createViewFromTag(context, name, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// If we have created a view, check it's android:onClick</span></div><div class="line">        checkOnClickListener(view, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们在xml写的那些布局映射成对象的时候，都会调用到这里来转换成对应的AppCompat。</p>
<p>偷梁换柱的关键点我们找到了，那如何找到这个入口呢？</p>
<p>其实当我们加载布局的时候最终都会用<code>LayoutInflater</code>来加载，所以我打算从这里入手，看源码我发现有一个接口可以利用-&gt;<code>Factory</code>,这个接口有一个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Hook you can supply that is called when inflating from a LayoutInflater.</div><div class="line">     * You can use this to customize the tag names available in your XML</div><div class="line">     * layout files.</div><div class="line">     * </div><div class="line">     * &lt;p&gt;</div><div class="line">     * Note that it is good practice to prefix these custom names with your</div><div class="line">     * package (i.e., com.coolcompany.apps) to avoid conflicts with system</div><div class="line">     * names.</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> name Tag name to be inflated.</div><div class="line">     * <span class="doctag">@param</span> context The context the view is being created in.</div><div class="line">     * <span class="doctag">@param</span> attrs Inflation attributes as specified in XML file.</div><div class="line">     * </div><div class="line">     * <span class="doctag">@return</span> View Newly created view. Return null for the default</div><div class="line">     *         behavior.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(String name, Context context, AttributeSet attrs)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>果然功夫不负有心人，如果我们实现了这个接口，最终加载布局的时候那么就会调用<code>onCreateView</code>在这里面来实现偷梁换柱替换成我们的自定义控件</p>
<p>ok，入口和关键代码都找到了，剩下的就是撸代码了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkinFactory</span> <span class="keyword">implements</span> <span class="title">LayoutInflaterFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AppCompatActivity mActivity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SkinFactory</span><span class="params">(AppCompatActivity activity)</span> </span>&#123;</div><div class="line">        mActivity = activity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line"></div><div class="line">        View view = <span class="keyword">null</span>;</div><div class="line">		<span class="comment">//是否需要替换成自定义View</span></div><div class="line">        <span class="keyword">boolean</span> isColorUi = attrs.getAttributeBooleanValue(<span class="string">"http://schemas.android.com/apk/res-auto"</span>, <span class="string">"isColorUi"</span>, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">if</span> (!isColorUi) <span class="keyword">return</span> delegateCreateView(parent, name, context, attrs);</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (name) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"TextView"</span>:</div><div class="line">                view = <span class="keyword">new</span> ColorTextView(context, attrs);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"ImageView"</span>:</div><div class="line">                view = <span class="keyword">new</span> ColorImageView(context, attrs);</div><div class="line">                Logger.i(<span class="string">"ImageView 转换成"</span>+view.getClass().getSimpleName());</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"RelativeLayout"</span>:</div><div class="line">                view = <span class="keyword">new</span> ColorRelativeLayout(context, attrs);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"LinearLayout"</span>:</div><div class="line">                view = <span class="keyword">new</span> ColorLinearLayout(context, attrs);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"View"</span>:</div><div class="line">                view = <span class="keyword">new</span> ColorView(context, attrs);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">            view = delegateCreateView(parent, name, context, attrs);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> View <span class="title">delegateCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        AppCompatDelegate delegate = mActivity.getDelegate();</div><div class="line">        <span class="keyword">return</span> delegate.createView(parent, name, context, attrs);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里<code>isColorUi</code>做了一个标示，因为有的是不需要转换的，如果不转换，直接走系统的创建View流程</p>
<p>关键代码写好了，下面是入口</p>
<p><strong>BaseActivity.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">LayoutInflaterCompat.setFactory(layoutInflater, <span class="keyword">new</span> SkinFactory(<span class="keyword">this</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原本以为这样就完美的解决了，没想到又引出了下一个问题</p>
<p><img src="/img/emoticon_wtf.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.IllegalStateException: A factory has already been set on <span class="keyword">this</span> LayoutInflater</div><div class="line">        at android.view.LayoutInflater.setFactory2(LayoutInflater.java:<span class="number">317</span>)</div><div class="line">        at android.support.v4.view.LayoutInflaterCompatLollipop.setFactory(LayoutInflaterCompatLollipop.java:<span class="number">28</span>)</div><div class="line">        at android.support.v4.view.LayoutInflaterCompat$LayoutInflaterCompatImplV21.setFactory(LayoutInflaterCompat.java:<span class="number">55</span>)</div><div class="line">        at android.support.v4.view.LayoutInflaterCompat.setFactory(LayoutInflaterCompat.java:<span class="number">85</span>)</div><div class="line">        at me.weyye.todaynews.base.BaseActivity.setLayoutInflaterFactory(BaseActivity.java:<span class="number">70</span>)</div><div class="line">        at me.weyye.todaynews.base.BaseActivity.onCreate(BaseActivity.java:<span class="number">60</span>)</div><div class="line">        at android.app.Activity.performCreate(Activity.java:<span class="number">6910</span>)</div><div class="line">        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:<span class="number">1123</span>)</div><div class="line">        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="number">2746</span>)</div><div class="line">        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2864</span>) </div><div class="line">        at android.app.ActivityThread.-wrap12(ActivityThread.java) </div><div class="line">        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1567</span>)</div></pre></td></tr></table></figure>
<p>于是找到这个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(Factory factory)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mFactorySet) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"A factory has already been set on this LayoutInflater"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Given factory can not be null"</span>);</div><div class="line">        &#125;</div><div class="line">        mFactorySet = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (mFactory == <span class="keyword">null</span>) &#123;</div><div class="line">            mFactory = factory;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mFactory = <span class="keyword">new</span> FactoryMerger(factory, <span class="keyword">null</span>, mFactory, mFactory2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>当<code>mFactorySet=true</code>的时候就会抛出这个错误，可是我并没有去set，那么可能是系统set了，对，没错，不然它怎么转换成AppCompat呢。</p>
<p>那么我只需要用反射把mFactorySet改成false就可以了</p>
<p>于是乎我修改了下原来的代码</p>
<p><strong>BaseActivity.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	setLayoutInflaterFactory();</div><div class="line">&#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLayoutInflaterFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">       LayoutInflater layoutInflater = getLayoutInflater();</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           Field mFactorySet = LayoutInflater.class.getDeclaredField(<span class="string">"mFactorySet"</span>);</div><div class="line">           mFactorySet.setAccessible(<span class="keyword">true</span>);</div><div class="line">           mFactorySet.set(layoutInflater, <span class="keyword">false</span>);</div><div class="line">           LayoutInflaterCompat.setFactory(layoutInflater, <span class="keyword">new</span> SkinFactory(<span class="keyword">this</span>));</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>先利用反射改成false然后在设置上去，这样就不会报错了</p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>好吧，几经周折终于完成了日夜间切换，但是当我滑动新闻列表的时候，又一个问题出来了…</p>
<p><img src="/img/17_2_7_16_49_36.gif" alt=""></p>
<p>当点击切换成夜间主题后，列表滑动后有的还是白天的主题，这很明显是<code>RecyclerView</code>复用的问题，我的思路是当点击切换主题后清除掉复用的View,这样就不会出现这种问题。怎么清除呢？好像RecyclerView没有直接给我们方法，所以我得去源码好好看看，发现RecyclerView里面有个内部类<code>Recycler</code>用来管理复用和回收的类，而且有<code>clear</code>方法，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Recycler</span> </span>&#123;</div><div class="line">	...</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">    * Clear scrap views out of this recycler. Detached views contained within a</div><div class="line">    * recycled view pool will remain.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        mAttachedScrap.clear();</div><div class="line">        recycleAndClearCachedViews();</div><div class="line">    &#125;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看代码好像是我所需要的，于是找到这个类对应的变量<code>mRecycler</code>,可惜的是private并且没有get方法，那就只好反射咯~</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">RecyclerView recyclerView = (RecyclerView) rootView;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Field mRecyclerField = RecyclerView.class.getDeclaredField(<span class="string">"mRecycler"</span>);</div><div class="line">    mRecyclerField.setAccessible(<span class="keyword">true</span>);</div><div class="line">    Method clearMethod = RecyclerView.Recycler.class.getDeclaredMethod(<span class="string">"clear"</span>);</div><div class="line">    clearMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">    clearMethod.invoke(mRecyclerField.get(recyclerView));</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ok,成功解决!</p>
<h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>首页点击+号添加栏目的时候会崩溃。而5.0以上的手机却没有问题，看到崩溃日志，也是让我一脸懵逼。。。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">android.view.InflateException: Binary XML file line #35: Error inflating class TextView</div><div class="line">                                                                        at android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:704)</div><div class="line">                                                                        at android.view.LayoutInflater.rInflate(LayoutInflater.java:746)</div><div class="line">                                                                        at android.view.LayoutInflater.rInflate(LayoutInflater.java:749)</div><div class="line">                                                                        at android.view.LayoutInflater.inflate(LayoutInflater.java:489)</div><div class="line">                                                                        at de.robv.android.xposed.XposedBridge.invokeOriginalMethodNative(Native Method)</div></pre></td></tr></table></figure>
<p>What?  <code>TextView</code>会报错？ 于是来到35行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">            android:id=<span class="string">"@+id/tvEdit"</span></div><div class="line">            android:layout_width=<span class="string">"match_parent"</span></div><div class="line">            android:layout_height=<span class="string">"match_parent"</span></div><div class="line">            android:paddingBottom=<span class="string">"5dp"</span></div><div class="line">            android:paddingLeft=<span class="string">"15dp"</span></div><div class="line">            android:paddingRight=<span class="string">"15dp"</span></div><div class="line">            android:paddingTop=<span class="string">"5dp"</span></div><div class="line">            android:text=<span class="string">"编辑"</span></div><div class="line">            android:textColor=<span class="string">"?attr/font_red"</span></div><div class="line">            android:textSize=<span class="string">"14sp"</span></div><div class="line">            app:isColorUi=<span class="string">"true"</span></div><div class="line">            android:background=<span class="string">"@drawable/shape_stroke_red"</span></div><div class="line">            /&gt;</div></pre></td></tr></table></figure>
<p>乍一看这个TextView没毛病啊，而且错误日志也是比较模糊。既然是在<code>LayoutInflater</code>里面抛出的异常，那我就在<code>LayoutInflater.createViewFromTag</code>方法里打个断点试下，再次调试</p>
<p><img src="/img/QQ截图20170224173406.png" alt=""></p>
<p>发现这个<code>shape_stroke_red.xml</code>找不到,可是我的drawable文件夹下面明明有啊！！</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line">    &lt;corners android:radius="20dp"/&gt;</div><div class="line">    &lt;solid android:color="@color/transparent"/&gt;</div><div class="line">    &lt;stroke</div><div class="line">        android:width="1dp"</div><div class="line">        android:color="?attr/font_red"/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure>
<p>难道是因为自定义属性的原因？于是乎改成固定颜色值，运行就正常了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line">    &lt;corners android:radius="20dp"/&gt;</div><div class="line">    &lt;solid android:color="@color/transparent"/&gt;</div><div class="line">    &lt;stroke</div><div class="line">        android:width="1dp"</div><div class="line">        android:color="#aaaaaa"/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure>
<p>可是这又是为什么呢？</p>
<p>于是在<code>stackoverflow</code>找到答案<a href="http://stackoverflow.com/questions/35473456/why-attr-coloraccent-dose-not-work-below-lollipop-version" target="_blank" rel="external">Why ?attr/colorAccent dose not work below lollipop version?</a></p>
<p>原来其原因是因为5.0以下drawable不支持自定义属性</p>
<h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li>加入未写界面以及功能</li>
<li>逻辑代码的整理</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/llew2011/article/details/51252401" target="_blank" rel="external">Android 源码系列之&lt;四&gt;从源码的角度深入理解LayoutInflater.Factory之主题切换(上)</a></p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>这个属于个人开发作品，仅做学习交流使用，如用到实际项目还需多考虑其他因素如并发等，请多多斟酌。<strong>诸位勿传播于非技术人员，拒绝用于商业用途，数据均属于非正常渠道获取，原作公司拥有所有权利。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android走进源码告诉你app是如何被启动的]]></title>
      <url>http://weyye.me/detail/android-source-activity-oncreate/</url>
      <content type="html"><![CDATA[<blockquote>
<p>转载请标明出处： <a href="http://www.weyye.me/detail/android-source-activity-oncreate/" target="_blank" rel="external">http://www.weyye.me/detail/android-source-activity-oncreate/</a><br>本文出自:<a href="http://weyye.me">【Wey Ye的博客】</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><strong>一个app的程序是怎么启动的？入口在哪里？</strong></li>
<li><strong>听说ActivityManagerServices很屌，Why？</strong></li>
<li><strong>Activity生命周期到底是谁调用的？</strong></li>
<li><strong>Application又是在哪里初始化的？onCreate又是如何被调用的？</strong></li>
<li><strong>面试官常常会问：为什么主线程使用looper.loop不会卡死界面?</strong></li>
<li><strong>等等..</strong></li>
</ul>
<p>是不是一直有这样的疑问？很懵逼对不对 - - ，那我们就站在巨人的丁丁上来解决一下这些问题，如果文中出现一些错误，还望指正，互相学习<br><a id="more"></a></p>
<h2 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h2><p> 大家都知道 <code>Android</code>是基于<code>Linux</code>系统的，而在<code>Linux</code>中，所有的进程都是由<code>init</code>进程直接或者是间接<code>fork</code>出来的，当我开机的时候<code>init</code>进程就会<code>fork</code>出一个<code>Android</code>的第一个新的进程<br><strong>Zygote</strong>,中文翻译过来要”受精卵”，一个很有意识的名字。为什么这么说呢，当我们<code>Zygote</code>进程跑起来后，<code>Android</code>为了实现实现资源共用和更快的启动速度，通过<code>Zygote</code>进程直接去<code>fork</code>出一些子进程，这就是为什么要<strong>”受精卵”</strong>的原因，也就是我们的<code>app</code>全部都是基于<code>Zygote</code>上的 ，没有<code>Zygote</code>就没有我们，当<code>Zygote</code>初始化完成之后，首先会<code>fork</code>它的第一个子进程<strong>SystemServer</strong>,这个类非常的重要，为什么这么说呢？因为系统里面重要的服务都是在这个进程里面开启的，比如<code>ActivityManagerService</code>、<code>PackageManagerService</code>、<code>WindowManagerService</code>等等，有木有觉得似曾相识<br>当<code>SystemServer</code>跑起来后，这些重要的服务也会随之创建,系统初始化完成之后我们就会进到系统桌面-&gt;<strong>Launcher</strong>，其实<code>Launcher</code>也是一个<code>app</code>，它继承自<code>Activity</code>，当我们点击桌面上的app后，系统就会为我们的app创建一个进程，然后启动我们App的第一个类<strong>ActivityThread</strong>,其实说到底我们的app就是一个<code>main</code>函数,也就是启动了<code>ActivityThread.main()</code>。我们重点来看下这个类</p>
<h2 id="App的程序入口"><a href="#App的程序入口" class="headerlink" title="App的程序入口"></a>App的程序入口</h2><blockquote>
<p>都说主线程更新ui，主线程不能有耗时操作，主线程是在哪里创建的呢？我们来看下ActivityThread.main()。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    ....</div><div class="line">    <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">    TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line"></div><div class="line">    Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line">    <span class="comment">//创建主线程Looper</span></div><div class="line">    Looper.prepareMainLooper();</div><div class="line"></div><div class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">    thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">        sMainThreadHandler = thread.getHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">    <span class="comment">//主线程消息循环</span></div><div class="line">    Looper.loop();</div><div class="line"></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="为什么主线程使用Looper-loop-不会卡死界面"><a href="#为什么主线程使用Looper-loop-不会卡死界面" class="headerlink" title="为什么主线程使用Looper.loop()不会卡死界面"></a>为什么主线程使用Looper.loop()不会卡死界面</h2><p>首先我们要明白一点，主线程也是一个线程，也是有他的生命周期的，当我们<code>new Thread()</code>后执行完里面的代码也就意味着这个线程的结束，刚说了主线程也是线程，如果我们的代码一下就执行完了，那么我们这个app的功能还能执行吗？ 我还没开始呢，你咋就结束了？这样多不持久，<code>Android</code>为了解决这个问题，使用的<strong>Looper</strong>循环,了解<code>Handler</code>的机制的童鞋，会知道在处理消息的时候使用了<code>Looper.loop()</code>方法，并且在该方法中进入了一个死循环<br>同时<code>Looper.loop()</code>方法是在主线程中调用的，那么为什么没有卡死界面呢？ </p>
<h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p>首先我们要明白线程它也是有生命周期的，它的生命周期在于这个线程里面所要执行的代码执行完成，这个线程的使命也就完成了</p>
<h3 id="主线程如何与子线程通信"><a href="#主线程如何与子线程通信" class="headerlink" title="主线程如何与子线程通信"></a>主线程如何与子线程通信</h3><p>其次我们要明白我们主线程是如何跟子线程通信（发消息）的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    Handler mHandler;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//初始化Looper对象 一个线程对应一个looper</span></div><div class="line">                Looper.prepare();</div><div class="line">                mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                        <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">                        Log.i(<span class="string">"test"</span>, <span class="string">"do somethings"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                <span class="comment">//开启消息循环</span></div><div class="line">                Looper.loop();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;).start();</div><div class="line">        findViewById(R.id.btn).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                mHandler.sendEmptyMessage(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们主线程跟子线程就是这样通信的，可是为什么要 先Looper.prepare(),然后执行处理逻辑，最后Looper.loop();<br>我们先来看看Looper.prepare()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">       prepare(<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">       &#125;</div><div class="line">       sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>sThreadLocal你可以理解成一个hashmap键值对，key就是我们当前的Thread线程，value就是new Lopper出来的对象，sThreadLocal.get()如果不等于空的话 表示直接调用了prepare已经set进去了，就会抛出一个异常。也就是说一个线程只能对应一个looper，人家可是很专一的~，在来看看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Run the message queue in this thread. Be sure to call</div><div class="line">    * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//获取当前线程对应的Looper对象</span></div><div class="line">       <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">       <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">//没有调用Looper.prepare()</span></div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">       <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">       <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">       Binder.clearCallingIdentity();</div><div class="line">       <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">	<span class="comment">//死循环，不断从消息队列取消息，有消息就直接处理消息</span></div><div class="line">       <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="comment">//取出下一个消息</span></div><div class="line">           Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">           <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">               <span class="comment">//当前没有消息，直接返回</span></div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">           <span class="keyword">final</span> Printer logging = me.mLogging;</div><div class="line">           <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">               logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                       msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</div><div class="line">           <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</div><div class="line">               Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//能走到这里，表示msg不为空，有消息要处理</span></div><div class="line">            <span class="comment">//调用handler.dispatchMessage()处理消息</span></div><div class="line">               msg.target.dispatchMessage(msg);</div><div class="line">           &#125; <span class="keyword">finally</span> &#123;</div><div class="line">               <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</div><div class="line">                   Trace.traceEnd(traceTag);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">               logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">           <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">           <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">           <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">               Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                       + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                       + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                       + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                       + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           msg.recycleUnchecked();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>代码上注释也写的比较清楚了，我们刚说了线程也是有生命周期的，我们在线程里面创建了looper对象之后，new Handler()然后去处理消息，假如我们Looper.loop()没有这个死循环，这个线程任务就执行完成了，那Handler里面<strong>还能收到消息吗</strong>？所以我就需要调用Looper.loop()一个死循环，不断去消息队列去取,然后我们主线程发了消息后，Looper取到了消息，子线程里面的Handler也就自然能够处理消息这就是这个调用Looper.loop()的作用</p>
<h3 id="主线程创建Handler的时候为什么不用调用Looper-prepare-Loop-loop"><a href="#主线程创建Handler的时候为什么不用调用Looper-prepare-Loop-loop" class="headerlink" title="主线程创建Handler的时候为什么不用调用Looper.prepare(),Loop.loop()?"></a>主线程创建Handler的时候为什么不用调用Looper.prepare(),Loop.loop()?</h3><p>我们在来看看AcivityThread源码</p>
<p><strong>ActivityThread.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		...</div><div class="line">        Looper.prepareMainLooper();</div><div class="line"></div><div class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">        thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sMainThreadHandler = thread.getHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        Looper.loop();</div><div class="line">		...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到木有，在我们app启动的时候,ActivityThread已经帮我们做好了Looper消息循环，所以我们在主线程new Handler()的时候就不用创建Looper，反而你再次调用Looper.prepare()还会报错，因为主线程已经创建了Looper对象了。</p>
<h3 id="为什么主线程不会卡死界面"><a href="#为什么主线程不会卡死界面" class="headerlink" title="为什么主线程不会卡死界面"></a>为什么主线程不会卡死界面</h3><p>理解了上面几个问题我们就比较好理解了，首先，主线程也是线程，只不过这个线程是被系统创建的（就好比我们自己创建了子线程一样），其次 Looper是不断的去消息队列里面取，取到消息就去处理消息，只要处理消息的操作不是耗时操作，就不会引起卡顿,其实<code>Android</code>的交互都是基于<strong>消息机制的分发</strong>，<code>handler</code> 可以发送消息，然后<code>loop</code> 里就分发消息然后就发给<code>handler</code>, 然后就执行到 <code>H（Handler ）</code>里的对应代码。所以这些代码就不会卡死～,也就说循环消息并不会使起卡死，而真正会卡死的是我们的处理消息，这也就是我们主线程为什么不能执行耗时操作的原因。</p>
<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>讲到这里你可能还不是很能理解，那我们就来举一个栗子~</p>
<p>我们去做地铁或者做火车的时候都要去过安检，这个安检的机器就好比我们的Looper对象，机器内部检测违禁品就好比是Handler，因为我们要依次排队去放到机器上去检查，我们一个人的行李物品就比作一个Message,多个人所以就组成了一个MessageQueue,  好，有了这些东西我们就可以脑补整个运行过程了，首先如果要运行机器首先你的插插头吧？不然怎么通电-&gt;（Looper.prepare）,通完点后你得按开关吧？（Looper.loop），因为运行很早，这个时候还没有人来安检，此时消息队列（MessageQueue）是空的，这个时候我过来安检，因为我是出去玩，所以带的东西比较少，这个时候我把我的包包（Message）放到了安检机器的韧带（MessageQueue）上面了，此时MessageQueue消息队列里面就有我的包包了，机器此时正在运转，<br>然后机器自动检测我的是否有违禁品（Handler.handleMessage）,这个时候来了位大叔，带着很大一包东西（Message），放到了MessageQueue里，这个安检机器还在循环（Looper）,当循环到这个大叔的大件后，大叔在另一头等待了好久发现怎么都不出来，因为太大，检测需要时间（假设机器比较low），而这个等待的时间就是我们所说的做了耗时操作导致ui卡顿。如果等了很久会导致很多乘客不满（ANR）。这个比喻可能不是很形象，但是话粗理不粗，这个只是我的个人理解</p>
<p>如果大家还是不能理解的话，可以参考<a href="http://www.codeceo.com/article/android-event.html" target="_blank" rel="external">Android事件机制详细解读</a>里面有更深入的解读</p>
<h2 id="ActivityThread-attach"><a href="#ActivityThread-attach" class="headerlink" title="ActivityThread.attach()"></a>ActivityThread.attach()</h2><p>回归上一个话题，执行main函数的时候new ActivityThread(),执行了它的attach方法，我们来看下attach方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system)</span> </span>&#123;</div><div class="line">    sCurrentActivityThread = <span class="keyword">this</span>;</div><div class="line">    mSystemThread = system;</div><div class="line">    <span class="keyword">if</span> (!system) &#123;</div><div class="line">       ...</div><div class="line">                                                </div><div class="line">       <span class="keyword">final</span> IActivityManager mgr =ActivityManagerNative.getDefault();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mgr.attachApplication(mAppThread);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Watch for getting close to heap limit.</span></div><div class="line">        BinderInternal.addGcWatcher(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!mSomeActivitiesChanged) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                Runtime runtime = Runtime.getRuntime();</div><div class="line">                <span class="keyword">long</span> dalvikMax = runtime.maxMemory();</div><div class="line">                <span class="keyword">long</span> dalvikUsed = runtime.totalMemory() - runtime.freeMemory();</div><div class="line">                <span class="keyword">if</span> (dalvikUsed &gt; ((<span class="number">3</span>*dalvikMax)/<span class="number">4</span>)) &#123;</div><div class="line">                    <span class="keyword">if</span> (DEBUG_MEMORY_TRIM) Slog.d(TAG, <span class="string">"Dalvik max="</span> + (dalvikMax/<span class="number">1024</span>)</div><div class="line">                            + <span class="string">" total="</span> + (runtime.totalMemory()/<span class="number">1024</span>)</div><div class="line">                            + <span class="string">" used="</span> + (dalvikUsed/<span class="number">1024</span>));</div><div class="line">                    mSomeActivitiesChanged = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        mgr.releaseSomeActivities(mAppThread);</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        <span class="keyword">throw</span> e.rethrowFromSystemServer();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Don't set application object here -- if the system crashes,</span></div><div class="line">        <span class="comment">// we can't display an alert, we just want to die die die.</span></div><div class="line">        android.ddm.DdmHandleAppName.setAppName(<span class="string">"system_process"</span>,</div><div class="line">                UserHandle.myUserId());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mInstrumentation = <span class="keyword">new</span> Instrumentation();</div><div class="line">            ContextImpl context = ContextImpl.createAppContext(</div><div class="line">                    <span class="keyword">this</span>, getSystemContext().mPackageInfo);</div><div class="line">            mInitialApplication = context.mPackageInfo.makeApplication(<span class="keyword">true</span>, <span class="keyword">null</span>);</div><div class="line">            mInitialApplication.onCreate();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="string">"Unable to instantiate Application():"</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先attach方法有一个boolean的变量system,传过来的是false，聪明的你一看就是这个意思，是否是系统应用 ，当然我们不是，然后我们会走到if里面，里面有一行比较关键的代码</p>
<blockquote>
<p>final IActivityManager mgr = ActivityManagerNative.getDefault();</p>
</blockquote>
<p>我点进去看下getDefault()函数</p>
<p><strong>ActivityManagerNative.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Retrieve the system's default/global activity manager.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> gDefault.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看注释说返回一个系统全局的ActivityManager，调用了<code>gDefault.get()</code>,我们来看下这个<code>gDefault</code>变量看看是在哪里初始化的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        IBinder b = ServiceManager.getService(<span class="string">"activity"</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service binder = "</span> + b);</div><div class="line">        &#125;</div><div class="line">        IActivityManager am = asInterface(b);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service = "</span> + am);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> am;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>ServiceManager.getService(“activity”)返回一个IBinder  这个Binder对象是谁呢？既然有getService，那么肯定有addService，并且这个key是“activity”，我们来看下是在哪个类添加的</p>
<p><strong>ActivityManagerService.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSystemProcess</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ServiceManager.addService(Context.ACTIVITY_SERVICE, <span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">        ServiceManager.addService(ProcessStats.SERVICE_NAME, mProcessStats);</div><div class="line">        ServiceManager.addService(<span class="string">"meminfo"</span>, <span class="keyword">new</span> MemBinder(<span class="keyword">this</span>));</div><div class="line">        ServiceManager.addService(<span class="string">"gfxinfo"</span>, <span class="keyword">new</span> GraphicsBinder(<span class="keyword">this</span>));</div><div class="line">        ServiceManager.addService(<span class="string">"dbinfo"</span>, <span class="keyword">new</span> DbBinder(<span class="keyword">this</span>));</div><div class="line">        <span class="keyword">if</span> (MONITOR_CPU_USAGE) &#123;</div><div class="line">            ServiceManager.addService(<span class="string">"cpuinfo"</span>, <span class="keyword">new</span> CpuBinder(<span class="keyword">this</span>));</div><div class="line">        &#125;</div><div class="line">        ServiceManager.addService(<span class="string">"permission"</span>, <span class="keyword">new</span> PermissionController(<span class="keyword">this</span>));</div><div class="line">        ServiceManager.addService(<span class="string">"processinfo"</span>, <span class="keyword">new</span> ProcessInfoService(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">        ApplicationInfo info = mContext.getPackageManager().getApplicationInfo(</div><div class="line">                <span class="string">"android"</span>, STOCK_PM_FLAGS | MATCH_SYSTEM_ONLY);</div><div class="line">        mSystemThread.installSystemApplicationInfo(info, getClass().getClassLoader());</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            ProcessRecord app = newProcessRecordLocked(info, info.processName, <span class="keyword">false</span>, <span class="number">0</span>);</div><div class="line">            app.persistent = <span class="keyword">true</span>;</div><div class="line">            app.pid = MY_PID;</div><div class="line">            app.maxAdj = ProcessList.SYSTEM_ADJ;</div><div class="line">            app.makeActive(mSystemThread.getApplicationThread(), mProcessStats);</div><div class="line">            <span class="keyword">synchronized</span> (mPidsSelfLocked) &#123;</div><div class="line">                mPidsSelfLocked.put(app.pid, app);</div><div class="line">            &#125;</div><div class="line">            updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">            updateOomAdjLocked();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to find android system package"</span>, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们看这一行代码</p>
<blockquote>
<p>ServiceManager.addService(Context.ACTIVITY_SERVICE, this, true);</p>
</blockquote>
<p>看下这个Context这个常量：</p>
<blockquote>
<p>public static final String ACTIVITY_SERVICE = “activity”;</p>
</blockquote>
<p>正好是刚才<code>ServiceManager.getService()</code>传过去的key, addService()的时候传过去一个<code>this</code>，也就是<strong>ActivityManagerService</strong>自己，那么getService()的时候返回的毫无疑问就是<strong>ActivityManagerService</strong></p>
<p>我们在回来看下ActivityThread.attach()方法</p>
<p><strong>ActivityThread.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> IActivityManager mgr = ActivityManagerNative.getDefault();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mgr.attachApplication(mAppThread);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>我们搞清楚调用ActivityManagerNative.getDefault()返回了IActivityManager类型的mgr，也就是<strong>ActivityManagerService</strong>之后 ，它调用了<code>attachApplication</code>,并传入了一个<strong>mAppThread</strong>我们首先来看下这个变量是什么类型</p>
<blockquote>
<p>final ApplicationThread mAppThread = new ApplicationThread();</p>
</blockquote>
<p>是<code>ApplicationThread</code>，我们在来看看调用了<code>ActivityManagerService.attachApplication</code>做了什么事情</p>
<p><strong>ActivityManagerService.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">attachApplication</span><span class="params">(IApplicationThread thread)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">int</span> callingPid = Binder.getCallingPid();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> origId = Binder.clearCallingIdentity();</div><div class="line">        attachApplicationLocked(thread, callingPid);</div><div class="line">        Binder.restoreCallingIdentity(origId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用了attachApplicationLocked()，继续看下做了啥</p>
<p>这个方法比较长，我就只取关键的部分贴出来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,</span></span></div><div class="line">        <span class="keyword">int</span> pid) &#123;</div><div class="line">....</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    ...    </div><div class="line">    ProfilerInfo profilerInfo = profileFile == <span class="keyword">null</span> ? <span class="keyword">null</span></div><div class="line">            : <span class="keyword">new</span> ProfilerInfo(profileFile, profileFd, samplingInterval, profileAutoStop);</div><div class="line">    thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,</div><div class="line">            profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,</div><div class="line">            app.instrumentationUiAutomationConnection, testMode,</div><div class="line">            mBinderTransactionTrackingEnabled, enableTrackAllocation,</div><div class="line">            isRestrictedBackupMode || !normalMode, app.persistent,</div><div class="line">            <span class="keyword">new</span> Configuration(mConfiguration), app.compat,</div><div class="line">            getCommonServicesLocked(app.isolated),</div><div class="line">            mCoreSettingsObserver.getCoreSettingsLocked());</div><div class="line">    updateLruProcessLocked(app, <span class="keyword">false</span>, <span class="keyword">null</span>);</div><div class="line">    app.lastRequestedGc = app.lastLowMemory = SystemClock.uptimeMillis();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="comment">// todo: Yikes!  What should we do?  For now we will try to</span></div><div class="line">    <span class="comment">// start another process, but that could easily get us in</span></div><div class="line">    <span class="comment">// an infinite loop of restarting processes...</span></div><div class="line">    Slog.wtf(TAG, <span class="string">"Exception thrown during bind of "</span> + app, e);</div><div class="line"></div><div class="line">    app.resetPackageList(mProcessStats);</div><div class="line">    app.unlinkDeathRecipient();</div><div class="line">    startProcessLocked(app, <span class="string">"bind fail"</span>, processName);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">....</div></pre></td></tr></table></figure>
<h2 id="Application是在什么时候创建的？onCreate-什么时候调用的？"><a href="#Application是在什么时候创建的？onCreate-什么时候调用的？" class="headerlink" title="Application是在什么时候创建的？onCreate()什么时候调用的？"></a>Application是在什么时候创建的？onCreate()什么时候调用的？</h2><p>执行完判断和赋值的操作后最后调用了thread.bindApplication(),刚才看到是ApplicationThread,所以我来看看<code>ApplicationThread.bindApplication</code></p>
<p><strong>ActivityThread.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThread</span> <span class="keyword">extends</span> <span class="title">ApplicationThreadNative</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_INFO_FORMAT = <span class="string">"  %8s %8s %14s %14s  %s"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastProcessState = -<span class="number">1</span>;</div><div class="line"></div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">bindApplication</span><span class="params">(String processName, ApplicationInfo appInfo,</span></span></div><div class="line">        List&lt;ProviderInfo&gt; providers, ComponentName instrumentationName,</div><div class="line">        ProfilerInfo profilerInfo, Bundle instrumentationArgs,</div><div class="line">        IInstrumentationWatcher instrumentationWatcher,</div><div class="line">        IUiAutomationConnection instrumentationUiConnection, <span class="keyword">int</span> debugMode,</div><div class="line">        <span class="keyword">boolean</span> enableBinderTracking, <span class="keyword">boolean</span> trackAllocation,</div><div class="line">        <span class="keyword">boolean</span> isRestrictedBackupMode, <span class="keyword">boolean</span> persistent, Configuration config,</div><div class="line">        CompatibilityInfo compatInfo, Map&lt;String, IBinder&gt; services, Bundle coreSettings) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (services != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Setup the service cache in the ServiceManager</span></div><div class="line">        ServiceManager.initServiceCache(services);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setCoreSettings(coreSettings);</div><div class="line"></div><div class="line">    AppBindData data = <span class="keyword">new</span> AppBindData();</div><div class="line">    data.processName = processName;</div><div class="line">    data.appInfo = appInfo;</div><div class="line">    data.providers = providers;</div><div class="line">    data.instrumentationName = instrumentationName;</div><div class="line">    data.instrumentationArgs = instrumentationArgs;</div><div class="line">    data.instrumentationWatcher = instrumentationWatcher;</div><div class="line">    data.instrumentationUiAutomationConnection = instrumentationUiConnection;</div><div class="line">    data.debugMode = debugMode;</div><div class="line">    data.enableBinderTracking = enableBinderTracking;</div><div class="line">    data.trackAllocation = trackAllocation;</div><div class="line">    data.restrictedBackupMode = isRestrictedBackupMode;</div><div class="line">    data.persistent = persistent;</div><div class="line">    data.config = config;</div><div class="line">    data.compatInfo = compatInfo;</div><div class="line">    data.initProfilerInfo = profilerInfo;</div><div class="line">    sendMessage(H.BIND_APPLICATION, data);</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到是<code>ActivityThread</code>的<strong>内部类</strong>，我去！你在玩我呢？绕了这么半天又绕回来了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1643415-44cc94546a3c9b00?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xq"></p>
<p>客官别急，我们继续向下看，执行bindApplication的时候发了一个消息</p>
<blockquote>
<p>sendMessage(H.BIND_APPLICATION, data);</p>
</blockquote>
<p>这个H就是我们前面说的Handler，我们来看下handler做了哪些处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">.....</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</div><div class="line">    <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">        <span class="keyword">case</span> BIND_APPLICATION:</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"bindApplication"</span>);</div><div class="line">        AppBindData data = (AppBindData)msg.obj;</div><div class="line">        handleBindApplication(data);</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到它调用了<code>handleBindApplication()</code>，其主要作用是绑定我的的自定义的application，做一些初始化操作，我们继续看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</div><div class="line">   ...</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ii != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> ApplicationInfo instrApp = <span class="keyword">new</span> ApplicationInfo();</div><div class="line">        ii.copyTo(instrApp);</div><div class="line">        instrApp.initForUser(UserHandle.myUserId());</div><div class="line">        <span class="keyword">final</span> LoadedApk pi = getPackageInfo(instrApp, data.compatInfo,</div><div class="line">                appContext.getClassLoader(), <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">final</span> ContextImpl instrContext = ContextImpl.createAppContext(<span class="keyword">this</span>, pi);</div><div class="line">    </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> ClassLoader cl = instrContext.getClassLoader();</div><div class="line">            mInstrumentation = (Instrumentation)</div><div class="line">                cl.loadClass(data.instrumentationName.getClassName()).newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to instantiate instrumentation "</span></div><div class="line">                + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">final</span> ComponentName component = <span class="keyword">new</span> ComponentName(ii.packageName, ii.name);</div><div class="line">        mInstrumentation.init(<span class="keyword">this</span>, instrContext, appContext, component,</div><div class="line">                data.instrumentationWatcher, data.instrumentationUiAutomationConnection);</div><div class="line">    </div><div class="line">        <span class="keyword">if</span> (mProfiler.profileFile != <span class="keyword">null</span> &amp;&amp; !ii.handleProfiling</div><div class="line">                &amp;&amp; mProfiler.profileFd == <span class="keyword">null</span>) &#123;</div><div class="line">            mProfiler.handlingProfiling = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">final</span> File file = <span class="keyword">new</span> File(mProfiler.profileFile);</div><div class="line">            file.getParentFile().mkdirs();</div><div class="line">            Debug.startMethodTracing(file.toString(), <span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mInstrumentation = <span class="keyword">new</span> Instrumentation();</div><div class="line">    &#125;</div><div class="line"> ....</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// If the app is being launched for full backup or restore, bring it up in</span></div><div class="line">        <span class="comment">// a restricted environment with the base application class.</span></div><div class="line">        Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</div><div class="line">        mInitialApplication = app;</div><div class="line">    </div><div class="line">        <span class="comment">// don't bring up providers in restricted mode; they may depend on the</span></div><div class="line">        <span class="comment">// app's custom Application class</span></div><div class="line">        <span class="keyword">if</span> (!data.restrictedBackupMode) &#123;</div><div class="line">            <span class="keyword">if</span> (!ArrayUtils.isEmpty(data.providers)) &#123;</div><div class="line">                installContentProviders(app, data.providers);</div><div class="line">                <span class="comment">// For process that contains content providers, we want to</span></div><div class="line">                <span class="comment">// ensure that the JIT is enabled "at some point".</span></div><div class="line">                mH.sendEmptyMessageDelayed(H.ENABLE_JIT, <span class="number">10</span>*<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="comment">// Do this after providers, since instrumentation tests generally start their</span></div><div class="line">        <span class="comment">// test thread at this point, and we don't want that racing.</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mInstrumentation.onCreate(data.instrumentationArgs);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Exception thrown in onCreate() of "</span></div><div class="line">                + data.instrumentationName + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mInstrumentation.callApplicationOnCreate(app);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="string">"Unable to create application "</span> + app.getClass().getName()</div><div class="line">                    + <span class="string">": "</span> + e.toString(), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            StrictMode.setThreadPolicy(savedPolicy);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有个比较重要的类，<code>mInstrumentation</code> 为什么说它特别重要呢，我们先来看看它怎么初始化的</p>
<blockquote>
<p>final ClassLoader cl = instrContext.getClassLoader();<br>mInstrumentation=(Instrumentation)cl.loadClass(data.instrumentationName.getClassName()).newInstance();</p>
</blockquote>
<p>通过反射创建mInstrumentation 然后给进行一系列初始化操作,然后执行了</p>
<blockquote>
<p>Application app = data.info.makeApplication(data.restrictedBackupMode, null);</p>
</blockquote>
<p>data.info是一个LoadeApk对象。</p>
<p><strong>LoadeApk.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Application <span class="title">makeApplication</span><span class="params">(<span class="keyword">boolean</span> forceDefaultAppClass,</span></span></div><div class="line">        Instrumentation instrumentation) &#123;</div><div class="line">    <span class="keyword">if</span> (mApplication != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mApplication;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"makeApplication"</span>);</div><div class="line"></div><div class="line">    Application app = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    String appClass = mApplicationInfo.className;</div><div class="line">    <span class="keyword">if</span> (forceDefaultAppClass || (appClass == <span class="keyword">null</span>)) &#123;</div><div class="line">        appClass = <span class="string">"android.app.Application"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        java.lang.ClassLoader cl = getClassLoader();</div><div class="line">        <span class="keyword">if</span> (!mPackageName.equals(<span class="string">"android"</span>)) &#123;</div><div class="line">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER,</div><div class="line">                    <span class="string">"initializeJavaContextClassLoader"</span>);</div><div class="line">            initializeJavaContextClassLoader();</div><div class="line">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        &#125;</div><div class="line">        ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, <span class="keyword">this</span>);</div><div class="line">        app = mActivityThread.mInstrumentation.newApplication(</div><div class="line">                cl, appClass, appContext);</div><div class="line">        appContext.setOuterContext(app);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">if</span> (!mActivityThread.mInstrumentation.onException(app, e)) &#123;</div><div class="line">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to instantiate application "</span> + appClass</div><div class="line">                + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mActivityThread.mAllApplications.add(app);</div><div class="line">    mApplication = app;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (instrumentation != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">       <span class="comment">//这里不会执行，以为传过来的是null，onCreate在上一层执行的</span></div><div class="line">            instrumentation.callApplicationOnCreate(app);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">if</span> (!instrumentation.onException(app, e)) &#123;</div><div class="line">                Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="string">"Unable to create application "</span> + app.getClass().getName()</div><div class="line">                    + <span class="string">": "</span> + e.toString(), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行了</p>
<blockquote>
<p>app = mActivityThread.mInstrumentation.newApplication(<br>                cl, appClass, appContext);</p>
</blockquote>
<p><strong>Instrumentation.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> Application <span class="title">newApplication</span><span class="params">(Class&lt;?&gt; clazz, Context context)</span></span></div><div class="line">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException, </div><div class="line">        ClassNotFoundException &#123;</div><div class="line">    Application app = (Application)clazz.newInstance();</div><div class="line">    app.attach(context);</div><div class="line">    <span class="keyword">return</span> app;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样通过反射出一个application并且 调用其<code>attach()</code>,也就是说我的自定义application的时候attach就是在这里调用的</p>
<p>接着上面<code>ActivityThread.handleBindApplication()</code>中,首先反射出<code>mInstrumentation</code><br>和Application然后执行了下面一句代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    mInstrumentation.callApplicationOnCreate(app);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Unable to create application "</span> + app.getClass().getName()</div><div class="line">            + <span class="string">": "</span> + e.toString(), e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用了<code>mInstrumentation.callApplicationOnCreate()</code>，我们的Application.oncreate()就是在<strong>这里</strong>调用的，现在明白为什么Instrumentation为什么那么重要了吧，它就像个<strong>管家婆</strong>一样，负责家里的大事小事，但是一般不抛头露面，听一家之主<code>ActivityThread</code>的安排。<br>好，搞清楚Application后我们在来看看activity在哪里被初始化以及调用oncreate()方法的</p>
<h2 id="Activity是怎样启动的"><a href="#Activity是怎样启动的" class="headerlink" title="Activity是怎样启动的"></a>Activity是怎样启动的</h2><p>前面说了ActivityThread.attach()调用了ActivityManagerService.attachApplication(),在代码中看到通过调用ApplicationThread.bindApplication()绑定了application,我们在看看bindApplication()之后在干了什么</p>
<p><strong>ActivityManagerService.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(IApplicationThread thread,</span></span></div><div class="line">        <span class="keyword">int</span> pid) &#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    ...</div><div class="line">    thread.bindApplication(processName, appInfo, providers, app.instrumentationClass,</div><div class="line">            profilerInfo, app.instrumentationArguments, app.instrumentationWatcher,</div><div class="line">            app.instrumentationUiAutomationConnection, testMode,</div><div class="line">            mBinderTransactionTrackingEnabled, enableTrackAllocation,</div><div class="line">            isRestrictedBackupMode || !normalMode, app.persistent,</div><div class="line">            <span class="keyword">new</span> Configuration(mConfiguration), app.compat,</div><div class="line">            getCommonServicesLocked(app.isolated),</div><div class="line">            mCoreSettingsObserver.getCoreSettingsLocked());</div><div class="line">    ...</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (normalMode) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mStackSupervisor.attachApplicationLocked(app)) &#123;</div><div class="line">                didSomething = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            Slog.wtf(TAG, <span class="string">"Exception thrown launching activities in "</span> + app, e);</div><div class="line">            badApp = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用了mStackSupervisor.attachApplicationLocked(app)，mStackSupervisor是<code>ActivityStackSupervisor</code>类型,这个类也是非常重要的，它决定着我们app是否能启动成功,我们看看做了什么</p>
<p><strong>ActivityStackSupervisor.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">attachApplicationLocked</span><span class="params">(ProcessRecord app)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">    <span class="keyword">final</span> String processName = app.processName;</div><div class="line">    <span class="keyword">boolean</span> didSomething = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> displayNdx = mActivityDisplays.size() - <span class="number">1</span>; displayNdx &gt;= <span class="number">0</span>; --displayNdx) &#123;</div><div class="line">    <span class="comment">//当前应用的整个activity堆信息</span></div><div class="line">        ArrayList&lt;ActivityStack&gt; stacks = mActivityDisplays.valueAt(displayNdx).mStacks;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stackNdx = stacks.size() - <span class="number">1</span>; stackNdx &gt;= <span class="number">0</span>; --stackNdx) &#123;</div><div class="line">            <span class="keyword">final</span> ActivityStack stack = stacks.get(stackNdx);</div><div class="line">            <span class="keyword">if</span> (!isFocusedStack(stack)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            ActivityRecord hr = stack.topRunningActivityLocked();</div><div class="line">            <span class="keyword">if</span> (hr != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (hr.app == <span class="keyword">null</span> &amp;&amp; app.uid == hr.info.applicationInfo.uid</div><div class="line">                        &amp;&amp; processName.equals(hr.processName)) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">//启动Activity                        </span></div><div class="line"><span class="keyword">if</span> (realStartActivityLocked(hr, app, <span class="keyword">true</span>, <span class="keyword">true</span>)) &#123;</div><div class="line">                            didSomething = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                        Slog.w(TAG, <span class="string">"Exception in new application when starting activity "</span></div><div class="line">                              + hr.intent.getComponent().flattenToShortString(), e);</div><div class="line">                        <span class="keyword">throw</span> e;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!didSomething) &#123;</div><div class="line">        ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>, !PRESERVE_WINDOWS);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> didSomething;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到调用了realStartActivityLocked(hr, app, true, true))，继续看</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">(ActivityRecord r, ProcessRecord app,</span></span></div><div class="line">        <span class="keyword">boolean</span> andResume, <span class="keyword">boolean</span> checkConfig) <span class="keyword">throws</span> RemoteException &#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">if</span> (andResume) &#123;</div><div class="line">        app.hasShownUi = <span class="keyword">true</span>;</div><div class="line">        app.pendingUiClean = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    app.forceProcessStateUpTo(mService.mTopProcessState);</div><div class="line">    app.thread.scheduleLaunchActivity(<span class="keyword">new</span> Intent(r.intent), r.appToken,</div><div class="line">            System.identityHashCode(r), r.info, <span class="keyword">new</span> Configuration(mService.mConfiguration),</div><div class="line">            <span class="keyword">new</span> Configuration(task.mOverrideConfig), r.compat, r.launchedFromPackage,</div><div class="line">            task.voiceInteractor, app.repProcState, r.icicle, r.persistentState, results,</div><div class="line">            newIntents, !andResume, mService.isNextTransitionForward(), profilerInfo);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到了调用了app.thread.scheduleLaunchActivity()，这个app是上一层传过来的ActivityRecord，它代表的就是要开启的Activity对象里面分装了很多信息，比如所在的ActivityTask等，如果这是首次打开应用，那么这个Activity会被放到ActivityTask的栈顶，那么这个thread就是我们的ApplicationThread,我们回到ActivityThread<br>看下ApplicationThread.scheduleLaunchActivity()做了什么</p>
<p><strong>ActivityThread.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThread</span> <span class="keyword">extends</span> <span class="title">ApplicationThreadNative</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleLaunchActivity</span><span class="params">(Intent intent, IBinder token, <span class="keyword">int</span> ident,</span></span></div><div class="line">            ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</div><div class="line">            CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">            <span class="keyword">int</span> procState, Bundle state, PersistableBundle persistentState,</div><div class="line">            List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</div><div class="line">            <span class="keyword">boolean</span> notResumed, <span class="keyword">boolean</span> isForward, ProfilerInfo profilerInfo) &#123;</div><div class="line">        ...</div><div class="line">        updatePendingConfiguration(curConfig);</div><div class="line">    </div><div class="line">        sendMessage(H.LAUNCH_ACTIVITY, r);</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>又用hanlder发了个消息，我们来看看hanlder怎么处理的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</div><div class="line">    <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">        <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</div><div class="line">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</div><div class="line">            <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class="line">        </div><div class="line">            r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                    r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">            handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);</div><div class="line">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Word天，几经周折又回到ActivityThread自己,心好累。。我们继续~</p>
<p><strong>ActivityThread.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent, String reason)</span> </span>&#123;</div><div class="line">    <span class="comment">// If we are getting ready to gc after going to the background, well</span></div><div class="line">    <span class="comment">// we are back active so skip it.</span></div><div class="line">    unscheduleGcIdler();</div><div class="line">    mSomeActivitiesChanged = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.profilerInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        mProfiler.setProfiler(r.profilerInfo);</div><div class="line">        mProfiler.startProfiling();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Make sure we are running with the most recent config.</span></div><div class="line">    handleConfigurationChanged(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (localLOGV) Slog.v(</div><div class="line">        TAG, <span class="string">"Handling launch of "</span> + r);</div><div class="line"></div><div class="line">    <span class="comment">// Initialize before creating the activity</span></div><div class="line">    WindowManagerGlobal.initialize();</div><div class="line">    <span class="comment">//反射创建一个Activity</span></div><div class="line">    Activity a = performLaunchActivity(r, customIntent);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</div><div class="line">        r.createdConfig = <span class="keyword">new</span> Configuration(mConfiguration);</div><div class="line">        reportSizeConfigurations(r);</div><div class="line">        Bundle oldState = r.state;</div><div class="line">        <span class="comment">//调用Activity.onResume</span></div><div class="line">        handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</div><div class="line">                !r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!r.activity.mFinished &amp;&amp; r.startsNotResumed) &#123;</div><div class="line">            <span class="comment">// The activity manager actually wants this one to start out paused, because it</span></div><div class="line">            <span class="comment">// needs to be visible but isn't in the foreground. We accomplish this by going</span></div><div class="line">            <span class="comment">// through the normal startup (because activities expect to go through onResume()</span></div><div class="line">            <span class="comment">// the first time they run, before their window is displayed), and then pausing it.</span></div><div class="line">            <span class="comment">// However, in this case we do -not- need to do the full pause cycle (of freezing</span></div><div class="line">            <span class="comment">// and such) because the activity manager assumes it can just retain the current</span></div><div class="line">            <span class="comment">// state it has.</span></div><div class="line">            performPauseActivityIfNeeded(r, reason);</div><div class="line"></div><div class="line">            <span class="comment">// We need to keep around the original state, in case we need to be created again.</span></div><div class="line">            <span class="comment">// But we only do this for pre-Honeycomb apps, which always save their state when</span></div><div class="line">            <span class="comment">// pausing, so we can not have them save their state when restarting from a paused</span></div><div class="line">            <span class="comment">// state. For HC and later, we want to (and can) let the state be saved as the</span></div><div class="line">            <span class="comment">// normal part of stopping the activity.</span></div><div class="line">            <span class="keyword">if</span> (r.isPreHoneycomb()) &#123;</div><div class="line">                r.state = oldState;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// If there was an error, for any reason, tell the activity manager to stop us.</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ActivityManagerNative.getDefault()</div><div class="line">                .finishActivity(r.token, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</div><div class="line">                        Activity.DONT_FINISH_TASK_WITH_ACTIVITY);</div><div class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到开头 ，关键代码调用了Activity a = performLaunchActivity(r, customIntent);<br>返回一个Activity，我们看看performLaunchActivity()</p>
<p><strong>ActivityThread.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    <span class="comment">// System.out.println("##### [" + System.currentTimeMillis() + "] ActivityThread.performLaunchActivity(" + r + ")");</span></div><div class="line"></div><div class="line">    ActivityInfo aInfo = r.activityInfo;</div><div class="line">    <span class="keyword">if</span> (r.packageInfo == <span class="keyword">null</span>) &#123;</div><div class="line">        r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</div><div class="line">                Context.CONTEXT_INCLUDE_CODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ComponentName component = r.intent.getComponent();</div><div class="line">    <span class="keyword">if</span> (component == <span class="keyword">null</span>) &#123;</div><div class="line">        component = r.intent.resolveActivity(</div><div class="line">            mInitialApplication.getPackageManager());</div><div class="line">        r.intent.setComponent(component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (r.activityInfo.targetActivity != <span class="keyword">null</span>) &#123;</div><div class="line">        component = <span class="keyword">new</span> ComponentName(r.activityInfo.packageName,</div><div class="line">                r.activityInfo.targetActivity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Activity activity = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        java.lang.ClassLoader cl = r.packageInfo.getClassLoader();</div><div class="line">        <span class="comment">//通过反射创建activity实例</span></div><div class="line">        activity = mInstrumentation.newActivity(</div><div class="line">                cl, component.getClassName(), r.intent);</div><div class="line">        StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class="line">        r.intent.setExtrasClassLoader(cl);</div><div class="line">        r.intent.prepareToEnterProcess();</div><div class="line">        <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">            r.state.setClassLoader(cl);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to instantiate activity "</span> + component</div><div class="line">                + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing launch of "</span> + r);</div><div class="line">        <span class="keyword">if</span> (localLOGV) Slog.v(</div><div class="line">                TAG, r + <span class="string">": app="</span> + app</div><div class="line">                + <span class="string">", appName="</span> + app.getPackageName()</div><div class="line">                + <span class="string">", pkg="</span> + r.packageInfo.getPackageName()</div><div class="line">                + <span class="string">", comp="</span> + r.intent.getComponent().toShortString()</div><div class="line">                + <span class="string">", dir="</span> + r.packageInfo.getAppDir());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//创建BaseContext</span></div><div class="line">            Context appContext = createBaseContextForActivity(r, activity);</div><div class="line">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class="line">            Configuration config = <span class="keyword">new</span> Configuration(mCompatConfiguration);</div><div class="line">            <span class="keyword">if</span> (r.overrideConfig != <span class="keyword">null</span>) &#123;</div><div class="line">                config.updateFrom(r.overrideConfig);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(TAG, <span class="string">"Launching activity "</span></div><div class="line">                    + r.activityInfo.name + <span class="string">" with config "</span> + config);</div><div class="line">            Window window = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="keyword">null</span> &amp;&amp; r.mPreserveWindow) &#123;</div><div class="line">                window = r.mPendingRemoveWindow;</div><div class="line">                r.mPendingRemoveWindow = <span class="keyword">null</span>;</div><div class="line">                r.mPendingRemoveWindowManager = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//我们的activity.attach就在这里被调用的</span></div><div class="line">            activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</div><div class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class="line">                    r.referrer, r.voiceInteractor, window);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (customIntent != <span class="keyword">null</span>) &#123;</div><div class="line">                activity.mIntent = customIntent;</div><div class="line">            &#125;</div><div class="line">            r.lastNonConfigurationInstances = <span class="keyword">null</span>;</div><div class="line">            activity.mStartedActivity = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">int</span> theme = r.activityInfo.getThemeResource();</div><div class="line">            <span class="keyword">if</span> (theme != <span class="number">0</span>) &#123;</div><div class="line">                activity.setTheme(theme);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            activity.mCalled = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!activity.mCalled) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">                    <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</div><div class="line">                    <span class="string">" did not call through to super.onCreate()"</span>);</div><div class="line">            &#125;</div><div class="line">            r.activity = activity;</div><div class="line">            r.stopped = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                activity.performStart();</div><div class="line">                r.stopped = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                    <span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</div><div class="line">                        mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</div><div class="line">                                r.persistentState);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</div><div class="line">                    mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</div><div class="line">                activity.mCalled = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">                    mInstrumentation.callActivityOnPostCreate(activity, r.state,</div><div class="line">                            r.persistentState);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mInstrumentation.callActivityOnPostCreate(activity, r.state);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!activity.mCalled) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">                        <span class="string">"Activity "</span> + r.intent.getComponent().toShortString() +</div><div class="line">                        <span class="string">" did not call through to super.onPostCreate()"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        r.paused = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        mActivities.put(r.token, r);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (SuperNotCalledException e) &#123;</div><div class="line">        <span class="keyword">throw</span> e;</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Unable to start activity "</span> + component</div><div class="line">                + <span class="string">": "</span> + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> activity;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们看到通过调用mInstrumentation.newActivity(<br>            cl, component.getClassName(), r.intent);返回一个Activity，哇~这个管家婆真是厉害！看看做了啥？肯定是反射创建一个Activity嘛。。不信？</p>
<p><strong>Instrumentation.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">newActivity</span><span class="params">(ClassLoader cl, String className,</span></span></div><div class="line">        Intent intent)</div><div class="line">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</div><div class="line">        ClassNotFoundException &#123;</div><div class="line">    <span class="keyword">return</span> (Activity)cl.loadClass(className).newInstance();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不得不说Instrumentation真是任劳任怨啊。。</p>
<p>好，接着上面创建Activity之后,判断activity是否不等于空，走进if里面调用了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">activity.attach(appContext, <span class="keyword">this</span>, getInstrumentation(), r.token,</div><div class="line">        r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">        r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class="line">        r.referrer, r.voiceInteractor, window);</div></pre></td></tr></table></figure>
<p>原来我们Activity的attach在这里调用的啊。。。接着下面走</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (r.isPersistable()) &#123;</div><div class="line">    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到没！看到没！熟悉不，我的application.onCreate也是这样调用的,管家婆666666</p>
<p><strong>Instrumentation.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnCreate</span><span class="params">(Activity activity, Bundle icicle)</span> </span>&#123;</div><div class="line">    prePerformCreate(activity);</div><div class="line">    activity.performCreate(icicle);</div><div class="line">    postPerformCreate(activity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用了activity.performCreate(icicle);看到这么名字就应该很清楚了吧~，又不信？</p>
<p><strong>Activity.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</div><div class="line">    restoreHasCurrentPermissionRequest(icicle);</div><div class="line">    onCreate(icicle);</div><div class="line">    mActivityTransitionState.readState(icicle);</div><div class="line">    performCreateCommon();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到木有~~~回到上面，当执行handleLaunchActivity的时候，调用<code>performLaunchActivity(r, customIntent);</code>返回了Activity之后<br>我们接着向下看</p>
<p><strong>ActivityThread.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Activity a = performLaunchActivity(r, customIntent);</div><div class="line"><span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</div><div class="line">    r.createdConfig = <span class="keyword">new</span> Configuration(mConfiguration);</div><div class="line">    reportSizeConfigurations(r);</div><div class="line">    Bundle oldState = r.state;</div><div class="line">    handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</div><div class="line">            !r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用了handleResumeActivity，不用说 我敢肯定是用mInstrumentation来调用Activity.onResume的,我们来验证一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">(IBinder token,</span></span></div><div class="line">        <span class="keyword">boolean</span> clearHide, <span class="keyword">boolean</span> isForward, <span class="keyword">boolean</span> reallyResume, <span class="keyword">int</span> seq, String reason) &#123;</div><div class="line">    ActivityClientRecord r = mActivities.get(token);</div><div class="line">    </div><div class="line">    ....    </div><div class="line">    <span class="comment">// TODO Push resumeArgs into the activity for consideration</span></div><div class="line">    r = performResumeActivity(token, clearHide, reason);</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续看performResumeActivity()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ActivityClientRecord <span class="title">performResumeActivity</span><span class="params">(IBinder token,</span></span></div><div class="line">        <span class="keyword">boolean</span> clearHide, String reason) &#123;</div><div class="line">ActivityClientRecord r = mActivities.get(token);</div><div class="line"><span class="keyword">if</span> (localLOGV) Slog.v(TAG, <span class="string">"Performing resume of "</span> + r</div><div class="line">        + <span class="string">" finished="</span> + r.activity.mFinished);</div><div class="line"><span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; !r.activity.mFinished) &#123;</div><div class="line">    <span class="keyword">if</span> (clearHide) &#123;</div><div class="line">        r.hideForNow = <span class="keyword">false</span>;</div><div class="line">        r.activity.mStartedActivity = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        r.activity.onStateNotSaved();</div><div class="line">        r.activity.mFragments.noteStateNotSaved();</div><div class="line">        <span class="keyword">if</span> (r.pendingIntents != <span class="keyword">null</span>) &#123;</div><div class="line">            deliverNewIntents(r, r.pendingIntents);</div><div class="line">            r.pendingIntents = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (r.pendingResults != <span class="keyword">null</span>) &#123;</div><div class="line">            deliverResults(r, r.pendingResults);</div><div class="line">            r.pendingResults = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        r.activity.performResume();</div><div class="line">...</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    <span class="keyword">if</span> (!mInstrumentation.onException(r.activity, e)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Unable to resume activity "</span></div><div class="line">            + r.intent.getComponent().toShortString()</div><div class="line">            + <span class="string">": "</span> + e.toString(), e);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到了调用r.activity.performResume()，我们在继续看看Activity.performResume()</p>
<p><strong>Activity.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    performRestart();</div><div class="line"></div><div class="line">    mFragments.execPendingActions();</div><div class="line"></div><div class="line">    mLastNonConfigurationInstances = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    mCalled = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">// mResumed is set by the instrumentation</span></div><div class="line">    mInstrumentation.callActivityOnResume(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (!mCalled) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">            <span class="string">"Activity "</span> + mComponent.toShortString() +</div><div class="line">            <span class="string">" did not call through to super.onResume()"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// invisible activities must be finished before onResume() completes</span></div><div class="line">    <span class="keyword">if</span> (!mVisibleFromClient &amp;&amp; !mFinished) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"An activity without a UI must call finish() before onResume() completes"</span>);</div><div class="line">        <span class="keyword">if</span> (getApplicationInfo().targetSdkVersion</div><div class="line">                &gt; android.os.Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">                    <span class="string">"Activity "</span> + mComponent.toShortString() +</div><div class="line">                    <span class="string">" did not call finish() prior to onResume() completing"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Now really resume, and install the current status bar and menu.</span></div><div class="line">    mCalled = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    mFragments.dispatchResume();</div><div class="line">    mFragments.execPendingActions();</div><div class="line"></div><div class="line">    onPostResume();</div><div class="line">    <span class="keyword">if</span> (!mCalled) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SuperNotCalledException(</div><div class="line">            <span class="string">"Activity "</span> + mComponent.toShortString() +</div><div class="line">            <span class="string">" did not call through to super.onPostResume()"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用了<code>mInstrumentation.callActivityOnResume(this);</code>看来我们的验证是没错的</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，Activity整个的启动流程也讲完了，大家也看到，调用过程极其复杂<br>源码中各种条件判断让人眼花缭乱，所以说如果你没记住也没关系，你只要记住这个流程，理解了Android在控制Activity生命周期时是如何操作，以及是通过哪几个关键的类进行操作的就可以了，以后遇到相关的问题之道从哪块下手即可，这些过程我虽然也是撸了一遍，但还是记不清。</p>
<h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p>为了大家方便，我整理了下整个的调用过程</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1643415-b8ba30e853934979?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><a href="http://upload-images.jianshu.io/upload_images/1643415-b8ba30e853934979?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="external">点我查看高清无码大图</a></p>
<p>以上是本文讲的整个流程图,写的比较水，希望对大家学习有所帮助。。。</p>
<h2 id="Android-Studio查看源码的小技巧"><a href="#Android-Studio查看源码的小技巧" class="headerlink" title="Android Studio查看源码的小技巧"></a>Android Studio查看源码的小技巧</h2><p>不知道大家遇到过没，我们平时做项目的时候,想要查看哪些类使用了这个变量的，或者调用过这个类的方法的时候，都会去按住Ctrl加上鼠标点击那个变量或者方法,但是你只能查看自己的项目使用过<br>比如你想查看这个方法在哪里使用过你可以按住ctrl再点击这个方法查看它的引用</p>
<p><img src="/img/1482741073.png" alt=""></p>
<p>可是我们查看源码的时候，比如我们查看ActivityThread的源码 想看一下handleResumeActivity在哪里调用了，可是你会发现你按住ctrl在点击会找不到引用。为什么呢？因为默认是搜索你的项目，也就是说只要你的项目调用了这个方法，你才可以搜到，可是这是系统调用的，我想查看到底是谁调用的，怎么办捏？</p>
<p><img src="/img/1482741210.png" alt=""></p>
<p>右键单击这个方法弹出菜单，点击Find Usages，快捷是Ctrl+g</p>
<p><img src="/img/1482741261.png" alt=""></p>
<p>默认是搜索我们的Project引用，我们修改成</p>
<p><img src="/img/1482741279.png" alt=""></p>
<p>然后点击Find</p>
<p><img src="/img/1482741296.png" alt=""></p>
<p>就找了调用的地方，然后我们双击就到了调用的那行代码,下次你在按住ctrl单击那个方法的时候就会弹出来引用的地方</p>
<p><img src="/img/1482741310.png" alt=""></p>
<p>这对于我们查看源码有很大的帮助~</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jianshu.com/p/6037f6fda285" target="_blank" rel="external">【凯子哥带你学Framework】Activity启动过程全解析</a></p>
<p><a href="http://blog.csdn.net/luoshengyang/article/details/6768304" target="_blank" rel="external">Android系统进程Zygote启动过程的源代码分析</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>讲了那么多，对于我们这些开发者来说，看源码是非常有必要，文中我只贴出了部分代码，完整的代码还要自己去看，这样印象也会非常深刻，看一遍不会，我们看两边，虽然一脸懵比，但是我们要相信自己，这点挫折怎能难倒我们程序员？最后的最后，如果文中有错误的地方还望大家指出</p>
<blockquote>
<p>博主整理不易，转载请注明出处:<br><a href="http://www.weyye.me/detail/android-source-activity-oncreate/" target="_blank" rel="external">http://www.weyye.me/detail/android-source-activity-oncreate/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[说说使用腾讯地图sdk遇到的那些坑]]></title>
      <url>http://weyye.me/detail/duplicate-files-copied/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前做项目一直使用的高德地图，这次做的项目客户必须使用腾讯地图，然后又去折腾了下腾讯地图，说说我遇到的哪些bug</p>
<h2 id="Bug1-使用RxJava集成sdk报错"><a href="#Bug1-使用RxJava集成sdk报错" class="headerlink" title="Bug1:使用RxJava集成sdk报错"></a>Bug1:使用RxJava集成sdk报错</h2><p>由于先Rxjava比较火，为了赶上时代的脚步，现在做的这几个项目都用的是Rxjava，但是当我导入腾讯地图sdk后，却报了这个错</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed <span class="keyword">for</span> task <span class="string">':app:transformResourcesWithMergeJavaResForDebug'</span>.</div><div class="line">&gt; com.android.build.api.transform.TransformException: com.android.builder.packaging.DuplicateFileException: Duplicate files copied in APK META-INF/rxjava.properties</div><div class="line">	File1: E:\Android Project\YiBangKe\app\libs\TencentMapSDK_Vector_v3.0.4.jar</div><div class="line">	File2: C:\Users\Administrator\.gradle\caches\modules-<span class="number">2</span>\files-<span class="number">2.1</span>\io.reactivex\rxjava\<span class="number">1.1</span>.1\b494968f6050d494de55dc3ce005e59c7eb40012\rxjava-<span class="number">1.1</span>.1.jar</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>报错原因应该是因为腾讯地图也加入了RxJava</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在app的<code>build.gradle</code>下面加入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    packagingOptions &#123;</div><div class="line">        exclude <span class="string">'META-INF/rxjava.properties'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Bug2-getMap-空指针"><a href="#Bug2-getMap-空指针" class="headerlink" title="Bug2:getMap()空指针"></a>Bug2:getMap()空指针</h2><p>使用地图官方建议是使用的SupportMapFragment,于是乎按照官方demo代码写下来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FragmentManager fm = getSupportFragmentManager();</div><div class="line">		SupportMapFragment map = (SupportMapFragment)fm.findFragmentById(R.id.frag_map);</div><div class="line">		tencentMap = map.getMap();</div><div class="line">		tencentMap.moveCamera(CameraUpdateFactory.newCameraPosition(<span class="keyword">new</span> </div><div class="line">				CameraPosition(<span class="keyword">new</span> LatLng(<span class="number">34.611524</span>,<span class="number">105.058565</span>), <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>)));</div><div class="line">		tencentMap.getUiSettings().setZoomControlsEnabled(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>这个是布局</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;fragment</div><div class="line">        android:id=<span class="string">"@+id/frag_map"</span></div><div class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.tencent.tencentmap.mapsdk.maps.SupportMapFragment"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span>/&gt;</div></pre></td></tr></table></figure>
<p>然后运行后报了下面这个错误</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.NullPointerException: Attempt to invoke virtual method <span class="string">'com.tencent.tencentmap.mapsdk.maps.TencentMap com.tencent.tencentmap.mapsdk.maps.MapView.getMap()'</span> on a <span class="keyword">null</span> object reference</div><div class="line"><span class="number">09</span>-<span class="number">28</span> <span class="number">17</span>:<span class="number">46</span>:<span class="number">03.824</span> <span class="number">10311</span>-<span class="number">10311</span>/com.baishan.yibangke W/System.err:     at com.tencent.tencentmap.mapsdk.maps.SupportMapFragment.getMap(SupportMapFragment.java:<span class="number">65</span>)</div><div class="line"><span class="number">09</span>-<span class="number">28</span> <span class="number">17</span>:<span class="number">46</span>:<span class="number">03.824</span> <span class="number">10311</span>-<span class="number">10311</span>/com.baishan.yibangke W/System.err:     at com.baishan.yibangke.presenter.MainPresenter.initMap(MainPresenter.java:<span class="number">47</span>)</div><div class="line"><span class="number">09</span>-<span class="number">28</span> <span class="number">17</span>:<span class="number">46</span>:<span class="number">03.824</span> <span class="number">10311</span>-<span class="number">10311</span>/com.baishan.yibangke W/System.err:     at com.baishan.yibangke.ui.fragment.MainFragment.processLogic(MainFragment.java:<span class="number">74</span>)</div></pre></td></tr></table></figure>
<p>MapView.getMap()是个空对象，也就是MapView，这个怎么会是null?我就奇了怪了，然后就看了下<code>SupportMapFragment</code>的代码</p>
<p><img src="/img/20160928174539.png" alt=""></p>
<p>也就是<code>mapV</code>是空，我们在看下在哪里赋值</p>
<p><img src="/img/20160928174704.png" alt=""></p>
<p>在这里初始化了 ，我们在继续跟踪看谁调用了这个方法</p>
<p><img src="/img/20160928174805.png" alt=""></p>
<p><code>newInstance</code>调用了，可是demo里面根本没有调用这个方法啊。。。你不说这谁知道。。。</p>
<h2 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FragmentManager fm = getActivity().getSupportFragmentManager();</div><div class="line">        SupportMapFragment mapFragment=SupportMapFragment.newInstance(getActivity());</div><div class="line">        fm.beginTransaction().add(R.id.fl_content, mapFragment).commit();</div></pre></td></tr></table></figure>
<p>在获取map之前手动掉一次，让它初始化即可</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android破解高德地图sdk使用map免key]]></title>
      <url>http://weyye.me/detail/crack-amap/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发项目中，经常会使用到地图，于是我会使用一些第三方的sdk，但是基本上所有的sdk使用时都需要申请key，填包名和sha1值，使(Ji)用(Qi)方(Fan)便(Suo)。作为一个android攻城狮，简直不能忍啊，于是乎看了下源码，决定破解一下，演示使用的是高德地图，至于百度，呵呵，下面看我慢慢道来</p>
<h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><ul>
<li>高德地图sdk最新版AMap_3DMap_V4.0.1_20160923.jar</li>
<li>Android Studio</li>
<li><a href="http://pan.baidu.com/s/1jIRnpGy" target="_blank" rel="external">jd-gui</a></li>
</ul>
<h2 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h2><p>在使用高德地图sdk的时候需要我们申请这个key，而这个key是需要我们提供包名和签名的sha1值生成的 因此 ，sdk在校验的时候肯定需要以下3个条件</p>
<ul>
<li>签名的sha1值</li>
<li>包名</li>
<li>申请成功的key</li>
</ul>
<a id="more"></a>
<p><a href="appkeyhttp://lbs.amap.com/dev/" target="_blank" rel="external">戳我申请</a></p>
<p>那么我们如果找到高德地图sdk的入口了，申请了一个key，可不可以写死在代码里面呢？这样就可以免去每次申请的烦恼，那么我们来尝试一下</p>
<p>首先我们打开jd-gui,然后从把从官网下下来最新的jar包拖进去，来看下jar包的目录结构</p>
<p><img src="/img/20160926145358.png" alt=""></p>
<p>我去，这么多，而且都是混淆过的，难道你要我一个个的找吗？No！这个当然是有技巧的。首先我们来思考一下</p>
<ul>
<li><p>为什么我们需要申请到的key</p>
</li>
<li><p>申请key的时候，为什么还要输入包名和sha1值，我乱填不行吗</p>
</li>
</ul>
<p>答案是 当然不行，当我们输入包名和sha1值提交的时候，其实在后台已经产生一条数据，标示着用这个sha1的签名生成出对应包名的app才可以使用。</p>
<p>既然高德要获取包名，那么我们平时是怎么样获取app的包名的呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), <span class="number">64</span>);</div><div class="line">String packageName=packageInfo.packageName;</div></pre></td></tr></table></figure>
<p>那么我们不妨搜索一下<code>packageName</code></p>
<p>按下快捷键ctrl+shift+s,打开搜索界面搜索 <code>packageName</code></p>
<p><img src="/img/20160926152501.png" alt=""></p>
<p>这只隐藏深处的小精灵被我抓到了 ，哈哈</p>
<p>ok，双击打开看下代码</p>
<p><img src="/img/20160926152955.png" alt=""></p>
<p>关键的地方我已经框出来了，其意思 先判断全局变量<code>e</code> 有没有值，有值直接返回，没有就获取自身app的签名的sha1和包名，然后用:去连接，最后<code>return e;</code> ，ok，找到这个全局变量我们把这个变量写死</p>
<h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>使用 Android Studio 新建一个 Android Library 的 Module ，包名与  jar 包要修改的类包名相同,新建一个类，与要修改的类名相同</p>
<p><img src="/img/20160926154945.png" alt=""></p>
<p>复制我们jd-gui中找到的class的内容到我们新建的类中，同时将 SDK 的 jar 包作为这个 Module 的依赖包，保证这个 Module 可以正常编译</p>
<p>我们修改变量e的值也就是 sha1:packageName，</p>
<p>观察这个类发现全是静态方法，由此可判断是工具类，所以key应该也会在这里面获取，我在继续查看下代码</p>
<p><img src="/img/20160926155811.png" alt=""></p>
<p>这个就是获取我们在<code>AndroidManifest</code>填入的key，我们继续把这个变量写死，填入我们的key</p>
<p>sha1有了，key有了，我们在来修改下包名，我们继续找</p>
<p><img src="/img/20160926160211.png" alt=""></p>
<p>我们继续修改b的值</p>
<p><img src="/img/20160926160355.png" alt=""></p>
<p>ok，大功告成。我们来打包成jar包，那么Android Studio 如何打包 jar 呢？</p>
<p>我们在这个修改的用来修改的 Module 的 build.gradle 中添加以下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">task <span class="title">makeJar</span><span class="params">(type: Copy)</span> </span>&#123;</div><div class="line"></div><div class="line">    delete <span class="string">'build/libs/lib.jar'</span></div><div class="line"></div><div class="line">    from(<span class="string">'build/intermediates/bundles/release/'</span>)</div><div class="line"></div><div class="line">    into(<span class="string">'build/libs/'</span>)</div><div class="line"></div><div class="line">    include(<span class="string">'classes.jar'</span>)</div><div class="line"></div><div class="line">    rename (<span class="string">'classes.jar'</span>, <span class="string">'lib.jar'</span>)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">makeJar.dependsOn(build)</div></pre></td></tr></table></figure>
<p>在工程目录下执行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">gradlew makeJar</div></pre></td></tr></table></figure>
<p><img src="/img/20160926162721.png" alt=""></p>
<p>即可得到 jar 文件</p>
<p><img src="/img/20160926162806.png" alt=""></p>
<p>用压缩软件打开<code>lib.jar</code>和<code>AMap_3DMap_V4.0.1_20160923</code></p>
<p>找到<code>lib.jar</code>的<code>eu.class</code> 替换 到<code>AMap_3DMap_V4.0.1_20160923</code>里的<code>eu.class</code></p>
<p><img src="/img/20160926163211.png" alt=""></p>
<p>大功告成~</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用修改后的 SDK jar 包替换原来的 jar 包进行地图测试</p>
<p>测试成功,包名和签名可以随意换咯，再也不用麻烦的每次申请 key 啦！</p>
<p><img src="/img/20160926164713.png" alt=""></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><a href="https://github.com/yewei02538/AmapDemo" target="_blank" rel="external">戳我传送GitHub</a></p>
<blockquote>
<p>demo中定位也是破解后免key，下一篇会讲解如何定位免key</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改hosts进入google世界]]></title>
      <url>http://weyye.me/detail/my-google-search/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从google退出中国市场后，很多人使用百度搜索，但是作为程序员的我们，应该去使用google搜索，因为很多资料是百度搜索不到的，而且没有广告，毕竟墙外的世界是非常精彩滴。</p>
<h2 id="如何科学上网"><a href="#如何科学上网" class="headerlink" title="如何科学上网"></a>如何科学上网</h2><ul>
<li>VPN： 这里不多做介绍</li>
<li>google浏览器插件：之前可以，现在很多插件都没和谐了</li>
<li>修改系统hosts： 这个是最简单粗暴的，而且速度又快，谁用谁知道</li>
</ul>
<h2 id="hosts下载地址"><a href="#hosts下载地址" class="headerlink" title="hosts下载地址"></a>hosts下载地址</h2><blockquote>
<p>IP有一段的时效性，并不能保证能永久使用，我会持续更新最新的hosts的文件提供给大家</p>
</blockquote>
<p><a href="http://weyye.me/download/hosts.zip">下载地址</a></p>
<a id="more"></a>
<h2 id="修改系统hosts"><a href="#修改系统hosts" class="headerlink" title="修改系统hosts"></a>修改系统hosts</h2><p>1、找到hosts这个文件，在Windows 系统下是位于C盘/windows/system32/drivers/etc目录里。</p>
<p><img src="/img/20160923165124.png" alt=""></p>
<p>2、把下载下来的<code>hosts.zip</code>解压后得到hosts，然后直接覆盖就可以了</p>
<h2 id="进入google世界"><a href="#进入google世界" class="headerlink" title="进入google世界"></a>进入google世界</h2><p>接下来，你就可以google搜索啦~</p>
<p>输入 <a href="https://www.google.com/" target="_blank" rel="external">https://www.google.com/</a></p>
<p><img src="/img/20160923165742.png" alt=""></p>
<p>然后就成功看到熟悉的google啦</p>
<p><img src="/img/20160923165725.png" alt=""></p>
<blockquote>
<p>如果还是不行的朋友，可以输入<a href="https://www.google.com/ncr" target="_blank" rel="external">https://www.google.com/ncr</a></p>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>作为了一名技术人，请大家一定要使用 Google ，虽然现在被墙，但是我坚信终有一天 Google 会回归，也许十年之后，也许五十年之后… </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android通用的EmptyLayout-展示不用状态的界面]]></title>
      <url>http://weyye.me/detail/empty-layout/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做项目的时候，经常会遇到列表数据为空的时候展示的空布局，如果你用的是<code>ListView</code> ,目测会经常使用<code>ListView</code>的一个方法<code>setEmptyView</code> ,如果你用的是<code>RecyclerView</code>,你也许会用自定义View来实现，但是，这些方法虽然使用起来简单，但是如果你提供一个复杂的布局，例如：</p>
<blockquote>
<p>在数据加载失败后，添加一个Button让用户可以选择重新加载数据。</p>
</blockquote>
<p>你肯定会说，findviewbyId找到这个button，给它设置点击事件，一个两个可以接受，但是，界面多了呢？ 那你说了那么多，有没有好的解决办法呢？ 当然有 而且是几行代码搞定的<br><a id="more"></a></p>
<h2 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h2><p>接下来就是重头戏 开始编码了 ，首先我们需要继承<code>FrameLayout</code>来实现这样的布局</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了灵活性，我自定义属性来添加所需要的布局，<code>values</code>下面新建<code>attrs.xml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name="EmptyLayout"&gt;</div><div class="line">        &lt;attr name="elEmptyLayout"  format="reference"/&gt;</div><div class="line">        &lt;attr name="elErrorLayout"  format="reference"/&gt;</div><div class="line">        &lt;attr name="elLoadingLayout"  format="reference"/&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>然后我们以此找到这些布局，并且添加进去</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyLayout</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  Context mContext;</div><div class="line">    <span class="keyword">private</span> View mEmptyView;</div><div class="line">    <span class="keyword">private</span> View mBindView;</div><div class="line">    <span class="keyword">private</span> View mErrorView;</div><div class="line">    <span class="keyword">private</span> Button mBtnReset;</div><div class="line">    <span class="keyword">private</span> View mLoadingView;</div><div class="line">    <span class="keyword">private</span> View loadingView;</div><div class="line">    <span class="keyword">private</span> TextView mEmptyText;</div><div class="line">    <span class="keyword">private</span> TextView tvLoadingText;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmptyLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        <span class="keyword">this</span>.mContext=context;</div><div class="line"></div><div class="line">        LayoutParams params = <span class="keyword">new</span> LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);</div><div class="line">        <span class="comment">//居中</span></div><div class="line">        params.gravity = Gravity.CENTER;</div><div class="line"></div><div class="line">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.EmptyLayout, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="comment">//数据为空时的布局</span></div><div class="line">        <span class="keyword">int</span> emptyLayout = ta.getResourceId(R.styleable.EmptyLayout_elEmptyLayout, R.layout.layout_empty);</div><div class="line">        mEmptyView = View.inflate(context, emptyLayout, <span class="keyword">null</span>);</div><div class="line">        mEmptyText =(TextView)mEmptyView.findViewById(R.id.tvEmptyText);</div><div class="line">        addView(mEmptyView,params);</div><div class="line"></div><div class="line">        <span class="comment">//加载中的布局</span></div><div class="line">        <span class="keyword">int</span> loadingLayout = ta.getResourceId(R.styleable.EmptyLayout_elLoadingLayout, R.layout.layout_loading);</div><div class="line">        mLoadingView = View.inflate(context, loadingLayout, <span class="keyword">null</span>);</div><div class="line">        tvLoadingText =(TextView)mLoadingView.findViewById(R.id.tvLoadingText);</div><div class="line">        addView(mLoadingView,params);</div><div class="line"></div><div class="line">        <span class="comment">//错误时的布局</span></div><div class="line">        <span class="keyword">int</span> errorLayout = ta.getResourceId(R.styleable.EmptyLayout_elErrorLayout, R.layout.layout_error);</div><div class="line">        mErrorView = View.inflate(context, errorLayout, <span class="keyword">null</span>);</div><div class="line">        mBtnReset =(Button)mErrorView.findViewById(R.id.btnReset);</div><div class="line">        addView(mErrorView, params);</div><div class="line"></div><div class="line">        <span class="comment">//全部隐藏</span></div><div class="line">        setGone();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 全部隐藏</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setGone</span><span class="params">()</span> </span>&#123;</div><div class="line">        mEmptyView.setVisibility(View.GONE);</div><div class="line">        mErrorView.setVisibility(View.GONE);</div><div class="line">        mLoadingView.setVisibility(View.GONE);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单说下几个变量的作用<br><code>mEmptyView</code> 表示数据为空的时候展示给用户<br><code>mEmptyText</code> 数据为空提示的文字<br><code>mErrorView</code> 加载错误展示给用户<br><code>mBtnReset</code> 加载错误重新加载的按钮<br><code>mLoadingView</code> 加载中展示给用户<br><code>tvLoadingText</code> 加载中提示的文字<br><code>mBindView</code> 我们要绑定的view</p>
<p>至此还需要重写一个方法,</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canScrollVertically</span><span class="params">(<span class="keyword">int</span> direction)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> mBindView.getVisibility()==VISIBLE?mBindView.canScrollVertically(direction):<span class="keyword">super</span>.canScrollVertically(direction);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如果加载成功，过度滑动会调用<code>mBindView</code>的<code>canScrollVertically</code>,没有则调用父类的<code>canScrollVertically</code></p>
<p>如果没有重写,添加SwipeRefreshLayout下拉刷新会报错，</p>
<p>在此谢谢<a href="">丁大哥</a>提出来的bug</p>
<p>好了，首先我们找到布局，然后添加进去，如果没有，添加默认的布局。至此，布局已经完成，那怎么控制呢？我们想要的是什么效果呢？</p>
<blockquote>
<p>在数据正在加载的时候调用loading方法，显示正在加载中的文本。<br>在数据加载成，隐藏该view。<br>在数据加载失败，显示加载失败的文本，并提供一个按钮去刷新数据。</p>
</blockquote>
<p>ok，我们按照这个条目一个个的来实现，首先是loading。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mBindView != <span class="keyword">null</span>) mBindView.setVisibility(View.GONE);</div><div class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(text)) tvLoadingText.setText(text);</div><div class="line">    setGone();</div><div class="line">    mLoadingView.setVisibility(View.VISIBLE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</div><div class="line">    showLoading(<span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先判断下我们要绑定view是不是为空，不为空则隐藏它，隐藏其他布局，然后展示loadingview</p>
<p>那加载失败了呢？同样简单！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span> </span>&#123;</div><div class="line">       showError(<span class="keyword">null</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mBindView != <span class="keyword">null</span>) mBindView.setVisibility(View.GONE);</div><div class="line">       <span class="keyword">if</span> (!TextUtils.isEmpty(text)) mBtnReset.setText(text);</div><div class="line">       setGone();</div><div class="line">       mErrorView.setVisibility(View.VISIBLE);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这个同上</p>
<p>继续看看加载成功的方法，这个更简单啦。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (mBindView != <span class="keyword">null</span>) mBindView.setVisibility(View.VISIBLE);</div><div class="line">       setGone();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>至此，我们整个效果就完成了，在加载数据的时候调用<code>showLoading</code>方法来显示加载中的文本，加载失败后，调用<code>showError</code>来显示加载失败的文本和刷新的按钮，在加载成功后直接隐藏控件</p>
<p>控件倒是完成了，我们还不知道mBindView怎么来的，其实也很简单。我们在代码中需要调用bindView(View view)方法来指定。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      mBindView = view;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>那么问题来了，我加载失败后，按钮的点击事件怎么做呢？有人会说用反射，这样既省了代码行数，看着又舒服，但是这样是有个问题存在的，大家都知道，一个项目的上线，都会进行混淆代码的，为了就是防止他人剽窃我们的劳动成果，可是混淆过后哪些class全部变成a，b，c ，这样如果用反射的话就会导致点击事件失效，因为找不到这个类，所以，我们还是老老实实的用onclick事件吧</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnButtonClick</span><span class="params">(OnClickListener listener)</span> </span>&#123;</div><div class="line">       mBtnReset.setOnClickListener(listener);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这样，一个简单的<code>EmptyLayout</code>就诞生了，接下来我们来看看怎么使用</p>
<p>先看<code>xml</code>布局<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line"></div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    tools:context="me.weyye.emptylayout.MainActivity"&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.widget.SwipeRefreshLayout</div><div class="line">        android:id="@+id/srl"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"&gt;</div><div class="line"></div><div class="line">        &lt;me.weyye.library.EmptyLayout xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">            android:id="@+id/emptyLayout"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            app:elEmptyLayout="@layout/layout_empty"</div><div class="line">            app:elErrorLayout="@layout/layout_error"</div><div class="line">            app:elLoadingLayout="@layout/layout_loading"&gt;</div><div class="line"></div><div class="line">            &lt;android.support.v7.widget.RecyclerView</div><div class="line">                android:id="@+id/recyclerView"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="match_parent"&gt;&lt;/android.support.v7.widget.RecyclerView&gt;</div><div class="line">        &lt;/me.weyye.library.EmptyLayout&gt;</div><div class="line">    &lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<p>在看看Activity中怎么调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EmptyLayout emptyLayout;</div><div class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> MyAdapter adapter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initView();</div><div class="line">        loadData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        emptyLayout = (EmptyLayout) findViewById(R.id.emptyLayout);</div><div class="line">        recyclerView = (RecyclerView) findViewById(R.id.recyclerView);</div><div class="line"> 	srl = (SwipeRefreshLayout) findViewById(R.id.srl);</div><div class="line">        recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>, LinearLayoutManager.VERTICAL, <span class="keyword">false</span>));</div><div class="line">        recyclerView.setAdapter(adapter = <span class="keyword">new</span> MyAdapter(list));</div><div class="line">        <span class="comment">//绑定</span></div><div class="line">        emptyLayout.bindView(recyclerView);</div><div class="line">        emptyLayout.setOnButtonClick(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">		<span class="comment">//重新加载数据</span></div><div class="line">                loadData();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">	srl.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">                srl.setRefreshing(<span class="keyword">false</span>);</div><div class="line">                loadData();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//模拟加载数据</span></div><div class="line">        emptyLayout.showLoading(<span class="string">"正在加载，请稍后"</span>);</div><div class="line">        mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//为了防止重复调用</span></div><div class="line">                mHandler.removeCallbacks(<span class="keyword">this</span>);</div><div class="line">                Random r = <span class="keyword">new</span> Random();</div><div class="line">                <span class="keyword">int</span> res = r.nextInt(<span class="number">10</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (res % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// 失败</span></div><div class="line">                    emptyLayout.showError(<span class="string">"加载失败，点击重新加载"</span>); <span class="comment">// 显示失败</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 成功</span></div><div class="line">                    emptyLayout.showSuccess();</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</div><div class="line">                        list.add(<span class="string">"测试"</span> + i);</div><div class="line">                    &#125;</div><div class="line">                    adapter.notifyDataSetChanged();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">3000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首页我们找到控件，然后给<code>recyclerView</code>设置<code>adapter</code>，然后我们调用<code>emptyLayout.bindView(recyclerView);</code>来设置要绑定的<code>view</code>,当然这里是recyclerView,接下来，通过<code>emptyLayout.setOnButtonClick()</code>来设置重新加载的时候执行哪个方法，在<code>loadData()</code>中延迟3秒获取数据，数据成功失败都是随机的，当失败的时候会调用<code>emptyLayout.showError()</code>，成功就调用emptyLayout.showSuccess();就这么简单，来看看运行效果</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/img/device-2016-08-30-180056 00_00_00-00_00_10~1.gif" alt=""></p>
<p>Github:<a href="https://github.com/yewei02538/EmptyLayout" target="_blank" rel="external">https://github.com/yewei02538/EmptyLayout</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[调用System.gc没有立即执行的解决方法]]></title>
      <url>http://weyye.me/detail/System-gc-not-called/</url>
      <content type="html"><![CDATA[<h2 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h2><p>当我们调用System.gc()的时候，其实并不会马上进行垃圾回收，甚至不一定会执行垃圾回收，查看系统源码可以看到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * Indicates to the VM that it would be a good time to run the</div><div class="line">    * garbage collector. Note that this is a hint only. There is no guarantee</div><div class="line">    * that the garbage collector will actually be run.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">boolean</span> shouldRunGC;</div><div class="line">       <span class="keyword">synchronized</span>(lock) &#123;</div><div class="line">           shouldRunGC = justRanFinalization;</div><div class="line">           <span class="keyword">if</span> (shouldRunGC) &#123;</div><div class="line">               justRanFinalization = <span class="keyword">false</span>;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               runGC = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (shouldRunGC) &#123;</div><div class="line">           Runtime.getRuntime().gc();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>也就是<code>justRanFinalization=true</code>的时候才会执行<br><a id="more"></a></p>
<p>查找发现当调用runFinalization()的时候<code>justRanFinalization</code>变为<code>true</code><br>下面是runFinalization()的源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* Provides a hint to the VM that it would be useful to attempt</div><div class="line">* to perform any outstanding object finalization.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runFinalization</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> shouldRunGC;</div><div class="line">        <span class="keyword">synchronized</span>(lock) &#123;</div><div class="line">            shouldRunGC = runGC;</div><div class="line">            runGC = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (shouldRunGC) &#123;</div><div class="line">            Runtime.getRuntime().gc();</div><div class="line">        &#125;</div><div class="line">        Runtime.getRuntime().runFinalization();</div><div class="line">        <span class="keyword">synchronized</span>(lock) &#123;</div><div class="line">            justRanFinalization = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实当我们直接调用<code>System.gc()</code>只会把这次gc请求记录下来，等到<code>runFinalization=true</code>的时候才会先去执行GC，<code>runFinalization=true</code>之后会在允许一次system.gc()。之后在call System.gc()还会重复上面的行为。<br>所以System.gc()要跟System.runFinalization()一起搭配使用才好。<br>查看<code>ZygoteInit.java</code> 里面 gc()和runFinalizationSync()是配合使用的，这样才有效果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gcAndFinalize</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> VMRuntime runtime = VMRuntime.getRuntime();</div><div class="line"></div><div class="line">    <span class="comment">/* runFinalizationSync() lets finalizers be called in Zygote,</span></div><div class="line">    * which doesn't have a HeapWorker thread.</div><div class="line">    */</div><div class="line">    System.gc();</div><div class="line">    runtime.runFinalizationSync();</div><div class="line">    System.gc();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>由此可见，当我们需要调用的<code>System.gc()</code>的时候 要这样才会执行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">System.gc();</div><div class="line">runtime.runFinalizationSync();</div><div class="line">System.gc();</div></pre></td></tr></table></figure>
<p>不过个人建议不到万不得已不要调用,因为jvm有自己的gc策略，根本不需要我们来手动</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dialog样式的Activity-可以在任何地方弹出的Dialog]]></title>
      <url>http://weyye.me/detail/dialogactivity/</url>
      <content type="html"><![CDATA[<p>最近项目用到一个需求，当收到透传消息后不管在哪个界面都要弹出一个dialog，当时觉得这还不简单嘛，new一个呀 ，于是我就在receiver里面new了一个</p>
<p>然后就报了如下的错</p>
<p><pre><br>android.view.WindowManager$BadTokenException: Unable to add window – token null is not for an application<br>android.view.ViewRootImpl.setView(ViewRootImpl.java:567)<br>                                                                    at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:269)                                                                       at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:69)                                                               at android.app.Dialog.show(Dialog.java:323)                                                                     at com.yipwey.dialogactivity.PushReceiver.onReceive(PushReceiver.java:16)<br>                                                                           at android.app.ActivityThread.handleReceiver(ActivityThread.java:2508)<br>                                                                           at android.app.ActivityThread.access$2000(ActivityThread.java:141)<br>                                                                           at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1323)<br></pre><br><a id="more"></a><br>下面是我写的测试代码</p>
<pre><code>public class PushReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        Dialog dialog=new Dialog(context);
        dialog.setTitle(&quot;Dialog&quot;);
        dialog.show();
    }
}
</code></pre><p>在stackoverflow上找到了原因 <a href="http://stackoverflow.com/questions/19024940/android-error-unable-to-add-window-token-null-is-not-for-an-application" title="Unable to add window" target="_blank" rel="external">http://stackoverflow.com/questions/19024940/android-error-unable-to-add-window-token-null-is-not-for-an-application</a></p>
<p>原因是因为传入的是Context，而需要的是Activity</p>
<p>查询SDK帮助文档：</p>
<p>Return the context of the single, global Application object of the current process. This generally should only be used if you need a Context whose lifecycle is separate from the current context, that is tied to the lifetime of the process rather than the current component.</p>
<p>在回来发现我这里是Receiver啊，并不是Activity<br>于是乎就要换一种方法了，也就是Dialog风格的Activity</p>
<p>这样既解决了这个问题，有可以再Activity里写控制的代码，下面我就抛砖引玉介绍一下吧</p>
<p>首先，要写一个style 并且集成 <code>@android:style/Theme.Dialog</code>，</p>
<pre><code>&lt;style name=&quot;CustomTheme_Dialog&quot; parent=&quot;@android:style/Theme.Dialog&quot;&gt;
       &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt;
       &lt;item name=&quot;android:windowFrame&quot;&gt;@null&lt;/item&gt;
       &lt;item name=&quot;android:windowActionBar&quot;&gt;false&lt;/item&gt;
       &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;
       &lt;item name=&quot;android:windowIsFloating&quot;&gt;true&lt;/item&gt;
       &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;false&lt;/item&gt;
       &lt;item name=&quot;android:backgroundDimEnabled&quot;&gt;true&lt;/item&gt;
&lt;/style&gt;
</code></pre><p>然后再你的Manifest中的Activity添加 <code>android:theme=&quot;@style/CustomTheme_Dialog&quot;</code></p>
<p>这样你的Activity就是dialog风格的了</p>
<pre><code>public class DialogActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}
</code></pre><p>下面是我的布局，</p>
<pre><code>&lt;RelativeLayout
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:paddingLeft=&quot;@dimen/activity_horizontal_margin&quot;
    android:paddingRight=&quot;@dimen/activity_horizontal_margin&quot;
    android:paddingTop=&quot;@dimen/activity_vertical_margin&quot;
    android:paddingBottom=&quot;@dimen/activity_vertical_margin&quot;
    tools:context=&quot;com.yipwey.dialogactivity.MainActivity&quot;&gt;

    &lt;Button
        android:id=&quot;@+id/btn&quot;
        android:text=&quot;Hello World!&quot;
        android:layout_centerInParent=&quot;true&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot; /&gt;
&lt;/RelativeLayout&gt;
</code></pre><p>,然后我们运行一下</p>
<p>然后你会发现又报错了</p>
<pre><code>Caused by: java.lang.IllegalStateException: You need to use a Theme.AppCompat theme (or descendant) with this activity.
                                                                               at android.support.v7.app.AppCompatDelegateImplV7.createSubDecor(AppCompatDelegateImplV7.java:343)
                                                                               at android.support.v7.app.AppCompatDelegateImplV7.ensureSubDecor(AppCompatDelegateImplV7.java:312)
                                                                               at android.support.v7.app.AppCompatDelegateImplV7.setContentView(AppCompatDelegateImplV7.java:277)
                                                                               at android.support.v7.app.AppCompatActivity.setContentView(AppCompatActivity.java:140)
                                                                               at com.yipwey.dialogactivity.MainActivity.onCreate(MainActivity.java:14)
                                                                               at android.app.Activity.performCreate(Activity.java:5308)
                                                                               at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1090)
</code></pre><p><img src="/img/img_xk.jpg" alt=""></p>
<p>原因是你继承了<code>AppCompatActivity</code>,改成<code>Activity</code>就可以了</p>
<p>然后就成功了</p>
<p><img src="/img/Screenshot_2016-08-12-17-25-15.jpeg" alt=""></p>
<p>如果你想点击外部不消失的话 调用 <code>setFinishOnTouchOutside(false);</code>就可以了(注意：一定要在setContentView之前调用)</p>
<p>demo下载地址：<a href="http://download.csdn.net/detail/yewei02538/9602028" target="_blank" rel="external">http://download.csdn.net/detail/yewei02538/9602028</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 使用PLDroidPlayer播放网络视频 根据视频角度自动旋转]]></title>
      <url>http://weyye.me/detail/Android-PLDroidPlayer%E6%92%AD%E6%94%BE/</url>
      <content type="html"><![CDATA[<p>最近因为项目需求 ，需要播放网络视频  ，于是乎 研究了一番 ，说说我遇到的那些坑    </p>
<p>现在市面上有几个比较主流好用的第三方框架</p>
<ul>
<li>Vitamio （  体积比较大，有商业化风险 github:<a href="https://github.com/yixia/VitamioBundle/）" target="_blank" rel="external">https://github.com/yixia/VitamioBundle/）</a></li>
<li>ijkplayer（B站下开源的框架 体积大 配置环境比较麻烦  github:<a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="external">https://github.com/Bilibili/ijkplayer</a> ）</li>
<li>PLDroidPlayer（七牛根据ijkplayer二次开发的 定制简单 github:<a href="https://github.com/pili-engineering/PLDroidPlayer）" target="_blank" rel="external">https://github.com/pili-engineering/PLDroidPlayer）</a><a id="more"></a>
当然还有很多别的视频播放框架 因为我只找到这几个= =！</li>
</ul>
<p>因为项目比较急，所以我用的比较简单的 PLDroidPlayer</p>
<p> 首先把需要的jar包和jni文件拷到你的项目中<br>这个里面有很多控件，你们可以根据自己的需求来用指定的控件，我用的是PLVideoTextureView</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;com.pili.pldroid.player.widget.PLVideoTextureView</div><div class="line">        android:id=<span class="string">"@+id/video"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span></div><div class="line">        android:layout_centerInParent=<span class="string">"true"</span> /&gt;</div><div class="line"><span class="meta">... </span>prompt<span class="string">'''</span></div></pre></td></tr></table></figure>
<p>然后findviewbyid找到它<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PLVideoTextureActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MediaController mMediaController;</div><div class="line">    <span class="keyword">private</span> PLVideoTextureView mVideoView;</div><div class="line">    <span class="keyword">private</span> Toast mToast = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> String mVideoPath = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRotation = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDisplayAspectRatio = PLVideoTextureView.ASPECT_RATIO_FIT_PARENT; <span class="comment">//default</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</div><div class="line">        setContentView(R.layout.activity_pl_video_texture);</div><div class="line">        mVideoView = (PLVideoTextureView) findViewById(R.id.VideoView);</div><div class="line"></div><div class="line">        View loadingView = findViewById(R.id.LoadingView);</div><div class="line">        mVideoView.setBufferingIndicator(loadingView);</div><div class="line"></div><div class="line">        mVideoPath = getIntent().getStringExtra(<span class="string">"videoPath"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// If you want to fix display orientation such as landscape, you can use the code show as follow</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) &#123;</span></div><div class="line">        <span class="comment">//     mVideoView.setPreviewOrientation(0);</span></div><div class="line">        <span class="comment">// &#125;</span></div><div class="line">        <span class="comment">// else if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) &#123;</span></div><div class="line">        <span class="comment">//     mVideoView.setPreviewOrientation(270);</span></div><div class="line">        <span class="comment">// &#125;</span></div><div class="line"></div><div class="line">        mVideoPath = getIntent().getStringExtra(<span class="string">"videoPath"</span>);</div><div class="line"></div><div class="line">        AVOptions options = <span class="keyword">new</span> AVOptions();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> isLiveStreaming = getIntent().getIntExtra(<span class="string">"liveStreaming"</span>, <span class="number">1</span>);</div><div class="line">        <span class="comment">// the unit of timeout is ms</span></div><div class="line">        options.setInteger(AVOptions.KEY_PREPARE_TIMEOUT, <span class="number">10</span> * <span class="number">1000</span>);</div><div class="line">        options.setInteger(AVOptions.KEY_GET_AV_FRAME_TIMEOUT, <span class="number">10</span> * <span class="number">1000</span>);</div><div class="line">        <span class="comment">// Some optimization with buffering mechanism when be set to 1</span></div><div class="line">        options.setInteger(AVOptions.KEY_LIVE_STREAMING, isLiveStreaming);</div><div class="line">        <span class="keyword">if</span> (isLiveStreaming == <span class="number">1</span>) &#123;</div><div class="line">            options.setInteger(AVOptions.KEY_DELAY_OPTIMIZATION, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 1 -&gt; hw codec enable, 0 -&gt; disable [recommended]</span></div><div class="line">        <span class="keyword">int</span> codec = getIntent().getIntExtra(<span class="string">"mediaCodec"</span>, <span class="number">0</span>);</div><div class="line">        options.setInteger(AVOptions.KEY_MEDIACODEC, codec);</div><div class="line"></div><div class="line">        <span class="comment">// whether start play automatically after prepared, default value is 1</span></div><div class="line">        options.setInteger(AVOptions.KEY_START_ON_PREPARED, <span class="number">0</span>);</div><div class="line"></div><div class="line">        mVideoView.setAVOptions(options);</div><div class="line"></div><div class="line">        <span class="comment">// You can mirror the display</span></div><div class="line">        <span class="comment">// mVideoView.setMirror(true);</span></div><div class="line"></div><div class="line">        <span class="comment">// You can also use a custom `MediaController` widget</span></div><div class="line">        mMediaController = <span class="keyword">new</span> MediaController(<span class="keyword">this</span>, <span class="keyword">false</span>, isLiveStreaming == <span class="number">1</span>);</div><div class="line">        mVideoView.setMediaController(mMediaController);</div><div class="line"></div><div class="line">        mVideoView.setOnInfoListener(mOnInfoListener);</div><div class="line"><span class="comment">//        mVideoView.setOnVideoSizeChangedListener(mOnVideoSizeChangedListener);</span></div><div class="line">        mVideoView.setOnBufferingUpdateListener(mOnBufferingUpdateListener);</div><div class="line">        mVideoView.setOnCompletionListener(mOnCompletionListener);</div><div class="line">        mVideoView.setOnSeekCompleteListener(mOnSeekCompleteListener);</div><div class="line">        mVideoView.setOnErrorListener(mOnErrorListener);</div><div class="line">        mVideoView.setVideoPath(mVideoPath);</div><div class="line">        mVideoView.setDisplayAspectRatio(PLVideoView.ASPECT_RATIO_PAVED_PARENT);</div><div class="line">        mVideoView.setOnPreparedListener(mOnPreparedListener);</div><div class="line">        mVideoView.setOnVideoSizeChangedListener(<span class="keyword">new</span> PLMediaPlayer.OnVideoSizeChangedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVideoSizeChanged</span><span class="params">(PLMediaPlayer plMediaPlayer, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">                Logger.i(<span class="string">"width:"</span> + width + <span class="string">"---heightL:"</span> + height);</div><div class="line">                <span class="keyword">if</span> (width &gt; height) &#123;</div><div class="line">                    <span class="comment">//视频是横屏 旋转方向</span></div><div class="line">                   setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mVideoView.setVideoPath(mVideoPath);</div><div class="line">        mVideoView.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        mToast = <span class="keyword">null</span>;</div><div class="line">        mVideoView.pause();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        mVideoView.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        mVideoView.stopPlayback();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickRotate</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        mRotation = (mRotation + <span class="number">90</span>) % <span class="number">360</span>;</div><div class="line">        mVideoView.setDisplayOrientation(mRotation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickSwitchScreen</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        mDisplayAspectRatio = (mDisplayAspectRatio + <span class="number">1</span>) % <span class="number">5</span>;</div><div class="line">        mVideoView.setDisplayAspectRatio(mDisplayAspectRatio);</div><div class="line">        <span class="keyword">switch</span> (mVideoView.getDisplayAspectRatio()) &#123;</div><div class="line">            <span class="keyword">case</span> PLVideoTextureView.ASPECT_RATIO_ORIGIN:</div><div class="line">                showToastTips(<span class="string">"Origin mode"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> PLVideoTextureView.ASPECT_RATIO_FIT_PARENT:</div><div class="line">                showToastTips(<span class="string">"Fit parent !"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> PLVideoTextureView.ASPECT_RATIO_PAVED_PARENT:</div><div class="line">                showToastTips(<span class="string">"Paved parent !"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> PLVideoTextureView.ASPECT_RATIO_16_9:</div><div class="line">                showToastTips(<span class="string">"16 : 9 !"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> PLVideoTextureView.ASPECT_RATIO_4_3:</div><div class="line">                showToastTips(<span class="string">"4 : 3 !"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PLMediaPlayer.OnErrorListener mOnErrorListener = <span class="keyword">new</span> PLMediaPlayer.OnErrorListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onError</span><span class="params">(PLMediaPlayer mp, <span class="keyword">int</span> errorCode)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (errorCode) &#123;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_INVALID_URI:</div><div class="line">                    showToastTips(<span class="string">"Invalid URL !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_404_NOT_FOUND:</div><div class="line">                    showToastTips(<span class="string">"404 resource not found !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_CONNECTION_REFUSED:</div><div class="line">                    showToastTips(<span class="string">"Connection refused !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_CONNECTION_TIMEOUT:</div><div class="line">                    showToastTips(<span class="string">"Connection timeout !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_EMPTY_PLAYLIST:</div><div class="line">                    showToastTips(<span class="string">"Empty playlist !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_STREAM_DISCONNECTED:</div><div class="line">                    showToastTips(<span class="string">"Stream disconnected !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_IO_ERROR:</div><div class="line">                    showToastTips(<span class="string">"Network IO Error !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_UNAUTHORIZED:</div><div class="line">                    showToastTips(<span class="string">"Unauthorized Error !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_PREPARE_TIMEOUT:</div><div class="line">                    showToastTips(<span class="string">"Prepare timeout !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.ERROR_CODE_READ_FRAME_TIMEOUT:</div><div class="line">                    showToastTips(<span class="string">"Read frame timeout !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_ERROR_UNKNOWN:</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    showToastTips(<span class="string">"unknown error !"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Todo pls handle the error status here, retry or call finish()</span></div><div class="line">            finish();</div><div class="line">            <span class="comment">// If you want to retry, do like this:</span></div><div class="line">            <span class="comment">// mVideoView.setVideoPath(mVideoPath);</span></div><div class="line">            <span class="comment">// mVideoView.start();</span></div><div class="line">            <span class="comment">// Return true means the error has been handled</span></div><div class="line">            <span class="comment">// If return false, then `onCompletion` will be called</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">   </div><div class="line">     <span class="keyword">private</span> PLMediaPlayer.OnCompletionListener mOnCompletionListener = <span class="keyword">new</span> PLMediaPlayer.OnCompletionListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(PLMediaPlayer plMediaPlayer)</span> </span>&#123;</div><div class="line"><span class="comment">//            finish();</span></div><div class="line">            showToast(<span class="string">"视频播放完成"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PLMediaPlayer.OnBufferingUpdateListener mOnBufferingUpdateListener = <span class="keyword">new</span> PLMediaPlayer.OnBufferingUpdateListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBufferingUpdate</span><span class="params">(PLMediaPlayer plMediaPlayer, <span class="keyword">int</span> precent)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PLMediaPlayer.OnSeekCompleteListener mOnSeekCompleteListener = <span class="keyword">new</span> PLMediaPlayer.OnSeekCompleteListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSeekComplete</span><span class="params">(PLMediaPlayer plMediaPlayer)</span> </span>&#123;</div><div class="line">            Logger.d(<span class="string">"onSeekComplete !"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PLMediaPlayer.OnPreparedListener mOnPreparedListener = <span class="keyword">new</span> PLMediaPlayer.OnPreparedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(PLMediaPlayer plMediaPlayer)</span> </span>&#123;</div><div class="line">            </div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">private</span> PLMediaPlayer.OnInfoListener mOnInfoListener = <span class="keyword">new</span> PLMediaPlayer.OnInfoListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInfo</span><span class="params">(PLMediaPlayer plMediaPlayer, <span class="keyword">int</span> what, <span class="keyword">int</span> extra)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (what) &#123;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_INFO_BUFFERING_START:</div><div class="line">                    Logger.i(<span class="string">"正在缓冲----"</span>);</div><div class="line">                    <span class="comment">//开始缓存，暂停播放</span></div><div class="line">                    <span class="keyword">if</span> (isPlaying()) &#123;</div><div class="line"><span class="comment">//                        stopPlayer();</span></div><div class="line">                        <span class="keyword">if</span> (mVideoView != <span class="keyword">null</span>) &#123;</div><div class="line">                            mVideoView.pause();</div><div class="line">                        &#125;</div><div class="line">                        needResume = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                    rl_loading.setVisibility(View.VISIBLE);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_INFO_BUFFERING_END:</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START:</div><div class="line">                    Logger.i(<span class="string">"缓冲完成----"</span>);</div><div class="line">                    <span class="comment">//缓存完成，继续播放</span></div><div class="line">                    <span class="keyword">if</span> (needResume)</div><div class="line"><span class="comment">//                        startPlayer();</span></div><div class="line">                        <span class="keyword">if</span> (mVideoView != <span class="keyword">null</span>) &#123;</div><div class="line">                            mVideoView.start();</div><div class="line">                        &#125;</div><div class="line">                    rl_loading.setVisibility(View.GONE);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_INFO_BUFFERING_BYTES_UPDATE:</div><div class="line">                    <span class="comment">//显示 下载速度</span></div><div class="line">                    Logger.e(<span class="string">"download rate:"</span> + extra);</div><div class="line">                    <span class="comment">//mListener.onDownloadRateChanged(arg2);</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            Logger.i(<span class="string">"onInfo:"</span> + what + <span class="string">"___"</span> + extra);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就完成了普通视频的播放和旋转视频播放</p>
<p>看似简单 其实隐藏着大问题 ，也就是我所说的大坑<br>现在我是这样判断角度的  当视频的宽度大于高度的 我就认为这是一个横屏的视频 ，也就是说假如这个视频是1330X720（我随便说的尺寸，只为举例）现在宽度大于高度了 那么这就是一个横屏的视频，但是我只要播放手机拍摄的视频就会发现视频被放大了 ，但是其实我录制视频的时候是竖着排的 ，可视播放的时候却给我横着过来了，然后我就去看这个手机拍摄视频的尺寸  现在一般录制视频最低都是1280X720  ，恰好符合我判断的逻辑 ，难道他真是横着的？  然后我就用系统自带的播放器打开 ，居然没有横过来 ，而是竖着播放的 ，可它是怎么知道这个方向呢？于是我在百度搜 ，确实可以获取到本地视频的角度，但是好像低版本好像不兼容，然后根据角度去判断 是否需要旋转，可是我这个是网络视频啊  ，网络视频怎么获取到视频角度啊 ？ 我第一反应是 上传视频的时候把宽高角度传到服务器 ，然后获取的时候根据这个角度旋转 ，但是别人播放网络视频的时候也没有传角度过去啊 - -  然后我就在github上面问那个作者  ，结果他说 </p>
<p><strong>“onInfo: 10001, 90”, 收到这个消息后，使用 PLVideoTextureView 的 setDisplayOrientation 旋转显示的方向，后面会补充这个回调的接口和文档。</strong></p>
<p>我晕  ，你这不说 谁知道啊 坑死啊 -  -<br>然后我就修改了下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">     * 视频的方向</div><div class="line">     */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mVideoRotation;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> needResume;</div><div class="line">    <span class="keyword">private</span> PLMediaPlayer.OnInfoListener mOnInfoListener = <span class="keyword">new</span> PLMediaPlayer.OnInfoListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInfo</span><span class="params">(PLMediaPlayer plMediaPlayer, <span class="keyword">int</span> what, <span class="keyword">int</span> extra)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (what) &#123;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_INFO_BUFFERING_START:</div><div class="line">                    Logger.i(<span class="string">"正在缓冲----"</span>);</div><div class="line">                    <span class="comment">//开始缓存，暂停播放</span></div><div class="line">                    <span class="keyword">if</span> (isPlaying()) &#123;</div><div class="line"><span class="comment">//                        stopPlayer();</span></div><div class="line">                        <span class="keyword">if</span> (mVideoView != <span class="keyword">null</span>) &#123;</div><div class="line">                            mVideoView.pause();</div><div class="line">                        &#125;</div><div class="line">                        needResume = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                    rl_loading.setVisibility(View.VISIBLE);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_INFO_BUFFERING_END:</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_INFO_VIDEO_RENDERING_START:</div><div class="line">                    Logger.i(<span class="string">"缓冲完成----"</span>);</div><div class="line">                    <span class="comment">//缓存完成，继续播放</span></div><div class="line">                    <span class="keyword">if</span> (needResume)</div><div class="line"><span class="comment">//                        startPlayer();</span></div><div class="line">                        <span class="keyword">if</span> (mVideoView != <span class="keyword">null</span>) &#123;</div><div class="line">                            mVideoView.start();</div><div class="line">                        &#125;</div><div class="line">                    rl_loading.setVisibility(View.GONE);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> PLMediaPlayer.MEDIA_INFO_BUFFERING_BYTES_UPDATE:</div><div class="line">                    <span class="comment">//显示 下载速度</span></div><div class="line">                    Logger.e(<span class="string">"download rate:"</span> + extra);</div><div class="line">                    <span class="comment">//mListener.onDownloadRateChanged(arg2);</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">10001</span>:</div><div class="line">                    <span class="comment">//保存视频角度</span></div><div class="line">                    mVideoRotation=extra;</div><div class="line">                    </div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            Logger.i(<span class="string">"onInfo:"</span> + what + <span class="string">"___"</span> + extra);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>然后在onVideoSizeChanged的回调里这样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mVideoView.setOnVideoSizeChangedListener(<span class="keyword">new</span> PLMediaPlayer.OnVideoSizeChangedListener() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVideoSizeChanged</span><span class="params">(PLMediaPlayer plMediaPlayer, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">               Logger.i(<span class="string">"width:"</span> + width + <span class="string">"---heightL:"</span> + height);</div><div class="line">               <span class="keyword">if</span> (width &gt; height&amp;&amp;mVideoRotation==<span class="number">0</span>) &#123;</div><div class="line">                   <span class="comment">//旋转方向</span></div><div class="line">                   setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</div><div class="line">               &#125;</div><div class="line">			<span class="comment">//如果视频角度是90度</span></div><div class="line">               <span class="keyword">if</span>(mVideoRotation==<span class="number">90</span>)</div><div class="line">               &#123;</div><div class="line">                  <span class="comment">//旋转视频</span></div><div class="line">                   mVideoView.setDisplayOrientation(<span class="number">270</span>);</div><div class="line">               &#125;</div><div class="line">               </div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<p>这样 不管是什么视频  播放终于正常了  - -  </p>
<p>转载请注明出处  <a href="http://blog.csdn.net/yewei02538/article/details/51882933" target="_blank" rel="external">http://blog.csdn.net/yewei02538/article/details/51882933</a></p>
<p>Demo下载地址: <a href="http://download.csdn.net/detail/yewei02538/9602032" target="_blank" rel="external">http://download.csdn.net/detail/yewei02538/9602032</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FragmentTransaction.commit onCreateView没有立即执行]]></title>
      <url>http://weyye.me/detail/commit-onCreateView/</url>
      <content type="html"><![CDATA[<p>在做项目中，遇到一个很奇怪的问题 ，当调用fragmentTransaction.commit的时候 fragment的生命周期并没有立即执行，下面是我的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">manager = getSupportFragmentManager();</div><div class="line">FragmentTransaction ft = manager.beginTransaction();</div><div class="line">MainFragment fragment = <span class="keyword">new</span> MainFragment();</div><div class="line">ft.add(R.id.fl_content, fragment);</div><div class="line">ft.commit();</div><div class="line">fragment.setInfo();</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>看似正常的逻辑没有问题 ，可是却fragment里面却给我报了NullPointException ,看log显示 view是null，我就奇怪了，明明onCreateView里面不是findViewById找到了嘛 ，不会啊，无意中查看了fragmentTransaction.commit()的源码才知道<br>注释是这样写的</p>
<pre><code>* Schedules a commit of this transaction.  The commit does
* not happen immediately; it will be scheduled as work on the main thread
* to be done the next time that thread is ready.
</code></pre><p>大致的意思是说 调用commit后不会立即执行，会再下一次准备好的时候，运行在主线程里面。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>调用commit后执行<br>    manager.executePendingTransactions();<br>这样就会立即执行了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[第三方sdk（我的是高德和个推） so库包冲突]]></title>
      <url>http://weyye.me/detail/sdk-so/</url>
      <content type="html"><![CDATA[<p>项目原本只加入高德sdk的时候，获取map，添加marker一切正常 ，可是只要我加入个推sdk后 编译运行 居然报高德地图的错 ，当时了就懵了- -<br>这个是错误日志<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java.lang.UnsatisfiedLinkError: No implementation found <span class="keyword">for</span> <span class="keyword">long</span> com.autonavi.amap.mapcore.MapCore.nativeNewInstance(java.lang.String, java.lang.String) (tried Java_com_autonavi_amap_mapcore_MapCore_nativeNewInstance and Java_com_autonavi_amap_mapcore_MapCore_nativeNewInstance__Ljava_lang_String_2Ljava_lang_String_2)</div><div class="line">                                                      at com.autonavi.amap.mapcore.MapCore.nativeNewInstance(Native Method)</div><div class="line">                                                      at com.autonavi.amap.mapcore.MapCore.newMap(MapCore.java:<span class="number">83</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>错误日志可以看出是so库没有找到的原因 ，这是我的lib目录</p>
<p><img src="/img/1468653788.png" alt=""></p>
<p>但是有的手机却没有问题<br>google一番后其实是因为没有找到手机对应的so库 （也就是armeabi-v7a）</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>把armeabi里高德的so库直接拷入到armeabi-v7a文件夹下 然后删除mips和mips64就可以了<br><img src="/img/1468653948 .png" alt=""></p>
<div class="tip"><br>    转载请注明出处<br></div>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[adapter.notifyDataSetChanged没有反应，触摸滑动屏幕才刷新]]></title>
      <url>http://weyye.me/detail/adapter-notifyDataSetChanged/</url>
      <content type="html"><![CDATA[<p>今天做项目遇到个比较头疼的问题，adapter.notifyDataSetChanged没有反应，要触摸屏幕才可以改变数据，上网查资料有人说是给list集合赋值的时候地址改变了（要用list.addAll()），可是我并没有改变地址 ，只是手动改了一个item的数据而已，后来发现只要延迟刷新就可以了<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">handler.postDelayed(<span class="keyword">new</span> Runnable() &#123;  </div><div class="line">            <span class="meta">@Override</span>  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">                adapter.notifyDataSetChanged();  </div><div class="line">            &#125;  </div><div class="line">        &#125;, <span class="number">500</span>);</div></pre></td></tr></table></figure></p>
<div class="tip"><br>    转载请注明出处<br></div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fragment里面用ViewPager嵌套2个Fragment，第二次切换变成空白的解决办法]]></title>
      <url>http://weyye.me/detail/fragment-viewpager%E5%B5%8C%E5%A5%97/</url>
      <content type="html"><![CDATA[<p>今天做项目遇到一个问题 ，</p>
<p>主界面用5个fragment组成，其中一个fragment里面 用了个ViewPager ，然后再这个ViewPager里面又嵌套了2个Fragment，第一次加载没有  但是第二次加载的时候 ，就变成空白<br><a id="more"></a><br>在网上找了下解决的办法，参考资料 <a href="http://www.th7.cn/Program/Android/201406/218498.shtml" target="_blank" rel="external">http://www.th7.cn/Program/Android/201406/218498.shtml</a></p>
<p>原因是因为：fragment里面又嵌套了fragment，所以在创建viewpager的适配器的时候传参为getChildFragmentManager()而不是getFragmentManager()，因为如果传参为getFragmentManager()则表示将父Fragment的FragmentManager传给了子Fragment，所以无法显示数据，</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><pre><code>FragmentPagerAdapter adapter= new FragmentPagerAdapter(getChildFragmentManager())
</code></pre><p>传入 <strong>getChildFragmentManager()</strong>就可以了</p>
]]></content>
    </entry>
    
  
  
</search>
